From 9def37f4fbe9460679dd650a379a985b94db0db4 Mon Sep 17 00:00:00 2001
From: Vladislav <121646449+elec7reify@users.noreply.github.com>
Date: Sun, 4 Aug 2024 15:42:52 +0200
Subject: [PATCH] Patch 0.1


diff --git a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
index be4b53b41..2227c5bf6 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/CraftLootableInventoryData.java
@@ -80,7 +80,7 @@ public class CraftLootableInventoryData {
 
         final Player bukkitPlayer = (Player) player.getBukkitEntity();
         LootableInventoryReplenishEvent event = new LootableInventoryReplenishEvent(bukkitPlayer, lootable.getAPILootableInventory());
-        if (paperConfig.restrictPlayerReloot && hasPlayerLooted(player.getUniqueID())) {
+        if (paperConfig.restrictPlayerReloot && hasPlayerLooted(player.getUUID())) {
             event.setCancelled(true);
         }
         return event.callEvent();
@@ -97,7 +97,7 @@ public class CraftLootableInventoryData {
                 this.lootable.setLootTableSeed(0);
             }
             if (player != null) { // This means that numRefills can be incremented without a player being in the lootedPlayers list - Seems to be EntityMinecartChest specific
-                this.setPlayerLootedState(player.getUniqueID(), true);
+                this.setPlayerLootedState(player.getUUID(), true);
             }
         } else {
             this.lootable.clearLootTable();
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 3e2f52647..1c25c4981 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.google.common.collect.Sets;
 import com.google.common.collect.UnmodifiableIterator;
+import net.minecraft.world.item.ItemBlock;
+
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -67,7 +69,7 @@ public class Block {
     }
 
     public static Block asBlock(@Nullable Item item) {
-        return item instanceof ItemBlock ? ((ItemBlock) item).getBlock() : Blocks.AIR;
+        return item instanceof net.minecraft.world.item.ItemBlock ? ((ItemBlock) item).getBlock() : Blocks.AIR;
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/BlockCactus.java b/src/main/java/net/minecraft/server/BlockCactus.java
index d8fb87f7a..0d6611e18 100644
--- a/src/main/java/net/minecraft/server/BlockCactus.java
+++ b/src/main/java/net/minecraft/server/BlockCactus.java
@@ -91,7 +91,7 @@ public class BlockCactus extends Block {
 
     public void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity) {
         CraftEventFactory.blockDamage = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()); // CraftBukkit
-        entity.damageEntity(DamageSource.CACTUS, 1.0F);
+        entity.hurt(DamageSource.CACTUS, 1.0F);
         CraftEventFactory.blockDamage = null; // CraftBukkit
     }
 
diff --git a/src/main/java/net/minecraft/server/BlockCauldron.java b/src/main/java/net/minecraft/server/BlockCauldron.java
index 57638ffc9..cbaacf0f0 100644
--- a/src/main/java/net/minecraft/server/BlockCauldron.java
+++ b/src/main/java/net/minecraft/server/BlockCauldron.java
@@ -3,6 +3,8 @@ package net.minecraft.server;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.item.ItemArmor;
 import org.bukkit.event.block.CauldronLevelChangeEvent; // CraftBukkit
 
 public class BlockCauldron extends Block {
@@ -153,8 +155,8 @@ public class BlockCauldron extends Block {
 
                     return true;
                 } else {
-                    if (i > 0 && item instanceof ItemArmor) {
-                        ItemArmor itemarmor = (ItemArmor) item;
+                    if (i > 0 && item instanceof net.minecraft.world.item.ItemArmor) {
+                        net.minecraft.world.item.ItemArmor itemarmor = (net.minecraft.world.item.ItemArmor) item;
 
                         if (itemarmor.d() == ItemArmor.EnumArmorMaterial.LEATHER && itemarmor.e_(itemstack) && !world.isClientSide) {
                             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 6832a19af..635bb268d 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -168,7 +168,7 @@ public class BlockFire extends Block {
                                 int j1 = this.d(world, blockposition1);
 
                                 if (j1 > 0) {
-                                    int k1 = (j1 + 40 + world.getDifficulty().a() * 7) / (i + 30);
+                                    int k1 = (j1 + 40 + world.getDifficulty().getId() * 7) / (i + 30);
 
                                     if (flag1) {
                                         k1 /= 2;
diff --git a/src/main/java/net/minecraft/server/BlockMagma.java b/src/main/java/net/minecraft/server/BlockMagma.java
index f7ab1c024..ece594ee7 100644
--- a/src/main/java/net/minecraft/server/BlockMagma.java
+++ b/src/main/java/net/minecraft/server/BlockMagma.java
@@ -18,7 +18,7 @@ public class BlockMagma extends Block {
     public void stepOn(World world, BlockPosition blockposition, Entity entity) {
         if (!entity.isFireProof() && entity instanceof EntityLiving && !EnchantmentManager.i((EntityLiving) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()); // CraftBukkit
-            entity.damageEntity(DamageSource.HOT_FLOOR, 1.0F);
+            entity.hurt(DamageSource.HOT_FLOOR, 1.0F);
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null; // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockPortal.java b/src/main/java/net/minecraft/server/BlockPortal.java
index 415668724..b6c4aba50 100644
--- a/src/main/java/net/minecraft/server/BlockPortal.java
+++ b/src/main/java/net/minecraft/server/BlockPortal.java
@@ -4,6 +4,7 @@ import com.google.common.cache.LoadingCache;
 import java.util.Random;
 import javax.annotation.Nullable;
 
+import net.minecraft.world.item.ItemMonsterEgg;
 import org.bukkit.event.entity.EntityPortalEnterEvent; // CraftBukkit
 import org.bukkit.event.world.PortalCreateEvent; // CraftBukkit
 
@@ -36,7 +37,7 @@ public class BlockPortal extends BlockHalfTransparent {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         super.b(world, blockposition, iblockdata, random);
-        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().a()) { // Spigot
+        if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.worldProvider.d() && world.getGameRules().getBoolean("doMobSpawning") && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
             int i = blockposition.getY();
 
             BlockPosition blockposition1;
diff --git a/src/main/java/net/minecraft/server/BlockSkull.java b/src/main/java/net/minecraft/server/BlockSkull.java
index 2c3bb3ca3..d93dceee9 100644
--- a/src/main/java/net/minecraft/server/BlockSkull.java
+++ b/src/main/java/net/minecraft/server/BlockSkull.java
@@ -6,6 +6,7 @@ import java.util.Random;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.craftbukkit.util.BlockStateListPopulator;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 // CraftBukkit end
@@ -153,12 +154,12 @@ public class BlockSkull extends BlockTileEntity {
     }
 
     public boolean b(World world, BlockPosition blockposition, ItemStack itemstack) {
-        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide ? this.e().a(world, blockposition) != null : false;
+        return itemstack.getData() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != Difficulty.PEACEFUL && !world.isClientSide ? this.e().a(world, blockposition) != null : false;
     }
 
     public void a(World world, BlockPosition blockposition, TileEntitySkull tileentityskull) {
         if (world.captureBlockStates) return; // CraftBukkit
-        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != EnumDifficulty.PEACEFUL && !world.isClientSide) {
+        if (tileentityskull.getSkullType() == 1 && blockposition.getY() >= 2 && world.getDifficulty() != Difficulty.PEACEFUL && !world.isClientSide) {
             ShapeDetector shapedetector = this.g();
             ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = shapedetector.a(world, blockposition);
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 4060fd274..93c318118 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -7,10 +7,8 @@ import java.util.UUID;
 // Paper end
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.Predicate;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import java.util.Arrays;
-import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -883,9 +881,9 @@ public class Chunk {
                 for (Iterator<Entity> iterator = ((List<Entity>) entityslice).iterator(); iterator.hasNext(); ) {
                     Entity entity = iterator.next();
                     if (entity.dead || entity.valid) continue;
-                    Entity other = ((WorldServer) world).entitiesByUUID.get(entity.uniqueID);
+                    Entity other = ((WorldServer) world).entitiesByUUID.get(entity.uuid);
                     if (other == null || other.dead || world.getEntityUnloadQueue().contains(other)) {
-                        other = thisChunk.get(entity.uniqueID);
+                        other = thisChunk.get(entity.uuid);
                     }
 
                     if (mode == DuplicateUUIDMode.SAFE_REGEN && other != null && !other.dead &&
@@ -916,7 +914,7 @@ public class Chunk {
                                 break;
                         }
                     }
-                    thisChunk.put(entity.uniqueID, entity);
+                    thisChunk.put(entity.uuid, entity);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index a99d0f870..55bdc919b 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -258,7 +258,7 @@ public abstract class CommandAbstract implements ICommand {
             return b(minecraftserver, icommandlistener, s).getName();
         } catch (ExceptionPlayerNotFound exceptionplayernotfound) {
             try {
-                return c(minecraftserver, icommandlistener, s).bn();
+                return c(minecraftserver, icommandlistener, s).getStringUUID();
             } catch (ExceptionEntityNotFound exceptionentitynotfound) {
                 if (PlayerSelector.isPattern(s)) {
                     throw exceptionentitynotfound;
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index 0607e55d3..bf2fc2b83 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -500,7 +500,7 @@ public class CommandScoreboard extends CommandAbstract {
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
                         if (!entity.world.paperConfig.nonPlayerEntitiesOnScoreboards && !(entity instanceof EntityHuman)) { continue; } // Paper
-                        String s2 = f(minecraftserver, icommandlistener, entity.bn());
+                        String s2 = f(minecraftserver, icommandlistener, entity.getStringUUID());
 
                         if (scoreboard.addPlayerToTeam(s2, s)) {
                             hashset.add(s2);
@@ -552,7 +552,7 @@ public class CommandScoreboard extends CommandAbstract {
 
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
-                        String s1 = f(minecraftserver, icommandlistener, entity.bn());
+                        String s1 = f(minecraftserver, icommandlistener, entity.getStringUUID());
 
                         if (scoreboard.removePlayerFromTeam(s1)) {
                             hashset.add(s1);
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6a8292ce4..d3abe2d0b 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -1,29 +1,24 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-import java.io.BufferedReader;
+
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.List;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
+
+import net.minecraft.world.Difficulty;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
-import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
-import org.bukkit.craftbukkit.LoggerOutputStream;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
@@ -382,8 +377,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         return this.t;
     }
 
-    public EnumDifficulty getDifficulty() {
-        return EnumDifficulty.getById(this.propertyManager.getInt("difficulty", EnumDifficulty.NORMAL.a()));
+    public Difficulty getDifficulty() {
+        return Difficulty.getById(this.propertyManager.getInt("difficulty", Difficulty.NORMAL.getId()));
     }
 
     public boolean isHardcore() {
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index fb1d640cc..90c709d85 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -5,6 +5,11 @@ import java.io.File;
 import java.io.PrintStream;
 import java.util.Random;
 import java.util.UUID;
+
+import net.minecraft.world.item.ItemArmor;
+import net.minecraft.world.item.ItemBucket;
+import net.minecraft.world.item.ItemDye;
+import net.minecraft.world.item.ItemMonsterEgg;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -148,7 +153,7 @@ public class DispenserRegistry {
 
                 itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
 
-                Entity entity = ItemMonsterEgg.spawnCreature(isourceblock.getWorld(), ItemMonsterEgg.h(itemstack), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
+                Entity entity = net.minecraft.world.item.ItemMonsterEgg.spawnCreature(isourceblock.getWorld(), net.minecraft.world.item.ItemMonsterEgg.h(itemstack), event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DISPENSE_EGG);
 
                 if (entity instanceof EntityLiving && itemstack.hasName()) {
                     entity.setCustomName(itemstack.getName());
@@ -268,7 +273,7 @@ public class DispenserRegistry {
             private final DispenseBehaviorItem b = new DispenseBehaviorItem();
 
             public ItemStack b(ISourceBlock isourceblock, ItemStack itemstack) {
-                ItemBucket itembucket = (ItemBucket) itemstack.getItem();
+                net.minecraft.world.item.ItemBucket itembucket = (net.minecraft.world.item.ItemBucket) itemstack.getItem();
                 BlockPosition blockposition = isourceblock.getBlockPosition().shift((EnumDirection) isourceblock.e().get(BlockDispenser.FACING));
 
                 // CraftBukkit start
@@ -605,7 +610,7 @@ public class DispenserRegistry {
 
                         itemstack.subtract(1);
                     }
-                } else if (ItemArmor.a(isourceblock, itemstack).isEmpty()) {
+                } else if (net.minecraft.world.item.ItemArmor.a(isourceblock, itemstack).isEmpty()) {
                     this.b = false;
                 }
 
diff --git a/src/main/java/net/minecraft/server/EnchantmentThorns.java b/src/main/java/net/minecraft/server/EnchantmentThorns.java
index 02240e799..3e68eb746 100644
--- a/src/main/java/net/minecraft/server/EnchantmentThorns.java
+++ b/src/main/java/net/minecraft/server/EnchantmentThorns.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.item.ItemArmor;
+
 import java.util.Random;
 
 public class EnchantmentThorns extends Enchantment {
@@ -31,7 +33,7 @@ public class EnchantmentThorns extends Enchantment {
 
         if (entity != null && a(i, random)) { // CraftBukkit
             if (entity != null) {
-                entity.damageEntity(DamageSource.a(entityliving), (float) b(i, random));
+                entity.hurt(DamageSource.a(entityliving), (float) b(i, random));
             }
 
             if (!itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/EnderDragonBattle.java b/src/main/java/net/minecraft/server/EnderDragonBattle.java
index 286069746..a7c0e3413 100644
--- a/src/main/java/net/minecraft/server/EnderDragonBattle.java
+++ b/src/main/java/net/minecraft/server/EnderDragonBattle.java
@@ -15,6 +15,8 @@ import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -40,7 +42,7 @@ public class EnderDragonBattle {
     private BlockPosition o;
     private EnumDragonRespawn p;
     private int q;
-    private List<EntityEnderCrystal> r;
+    private List<net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal> r;
 
     public EnderDragonBattle(WorldServer worldserver, NBTTagCompound nbttagcompound) {
         this.c = (BossBattleServer) (new BossBattleServer(new ChatMessage("entity.EnderDragon.name", new Object[0]), BossBattle.BarColor.PINK, BossBattle.BarStyle.PROGRESS)).setPlayMusic(true).c(true);
@@ -139,7 +141,7 @@ public class EnderDragonBattle {
                 } else {
                     EntityEnderDragon entityenderdragon = (EntityEnderDragon) list.get(0);
 
-                    this.m = entityenderdragon.getUniqueID();
+                    this.m = entityenderdragon.getUUID();
                     EnderDragonBattle.a.info("Found that there\'s a dragon still alive ({})", entityenderdragon);
                     this.k = false;
                     if (!flag) {
@@ -173,7 +175,7 @@ public class EnderDragonBattle {
                         this.m();
                     } else {
                         EnderDragonBattle.a.debug("Haven\'t seen our dragon, but found another one to use.");
-                        this.m = ((EntityEnderDragon) list1.get(0)).getUniqueID();
+                        this.m = ((EntityEnderDragon) list1.get(0)).getUUID();
                     }
 
                     this.g = 0;
@@ -327,14 +329,14 @@ public class EnderDragonBattle {
         for (int j = 0; j < i; ++j) {
             WorldGenEnder.Spike worldgenender_spike = aworldgenender_spike[j];
 
-            this.h += this.d.a(EntityEnderCrystal.class, worldgenender_spike.f()).size();
+            this.h += this.d.a(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal.class, worldgenender_spike.f()).size();
         }
 
         EnderDragonBattle.a.debug("Found {} end crystals still alive", Integer.valueOf(this.h));
     }
 
     public void a(EntityEnderDragon entityenderdragon) {
-        if (entityenderdragon.getUniqueID().equals(this.m)) {
+        if (entityenderdragon.getUUID().equals(this.m)) {
             this.c.setProgress(0.0F);
             this.c.setVisible(false);
             this.a(true);
@@ -383,12 +385,12 @@ public class EnderDragonBattle {
         entityenderdragon.getDragonControllerManager().setControllerPhase(DragonControllerPhase.a);
         entityenderdragon.setPositionRotation(0.0D, 128.0D, 0.0D, this.d.random.nextFloat() * 360.0F, 0.0F);
         this.d.addEntity(entityenderdragon);
-        this.m = entityenderdragon.getUniqueID();
+        this.m = entityenderdragon.getUUID();
         return entityenderdragon;
     }
 
     public void b(EntityEnderDragon entityenderdragon) {
-        if (entityenderdragon.getUniqueID().equals(this.m)) {
+        if (entityenderdragon.getUUID().equals(this.m)) {
             this.c.setProgress(entityenderdragon.getHealth() / entityenderdragon.getMaxHealth());
             this.g = 0;
             if (entityenderdragon.hasCustomName()) {
@@ -402,7 +404,7 @@ public class EnderDragonBattle {
         return this.h;
     }
 
-    public void a(EntityEnderCrystal entityendercrystal, DamageSource damagesource) {
+    public void a(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal entityendercrystal, DamageSource damagesource) {
         if (this.p != null && this.r.contains(entityendercrystal)) {
             EnderDragonBattle.a.debug("Aborting respawn sequence");
             this.p = null;
@@ -448,7 +450,7 @@ public class EnderDragonBattle {
 
             while (iterator.hasNext()) {
                 EnumDirection enumdirection = (EnumDirection) iterator.next();
-                List list = this.d.a(EntityEnderCrystal.class, new AxisAlignedBB(blockposition1.shift(enumdirection, 2)));
+                List list = this.d.a(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal.class, new AxisAlignedBB(blockposition1.shift(enumdirection, 2)));
 
                 if (list.isEmpty()) {
                     return;
@@ -463,7 +465,7 @@ public class EnderDragonBattle {
 
     }
 
-    private void a(List<EntityEnderCrystal> list) {
+    private void a(List<net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal> list) {
         if (this.k && this.p == null) {
             for (ShapeDetector.ShapeDetectorCollection shapedetector_shapedetectorcollection = this.h(); shapedetector_shapedetectorcollection != null; shapedetector_shapedetectorcollection = this.h()) {
                 for (int i = 0; i < this.f.c(); ++i) {
@@ -493,11 +495,11 @@ public class EnderDragonBattle {
 
         for (int j = 0; j < i; ++j) {
             WorldGenEnder.Spike worldgenender_spike = aworldgenender_spike[j];
-            List list = this.d.a(EntityEnderCrystal.class, worldgenender_spike.f());
+            List list = this.d.a(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal.class, worldgenender_spike.f());
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
-                EntityEnderCrystal entityendercrystal = (EntityEnderCrystal) iterator.next();
+                net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal entityendercrystal = (EntityEnderCrystal) iterator.next();
 
                 entityendercrystal.setInvulnerable(false);
                 entityendercrystal.setBeamTarget((BlockPosition) null);
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 74bbba011..fb6aaf7db 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -13,6 +13,8 @@ import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.InteractionResult;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -167,8 +169,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     protected Vec3D ao;
     protected EnumDirection ap;
     private boolean invulnerable;
-    protected UUID uniqueID;
-    protected String ar;
+    protected UUID uuid;
+    protected String stringUUID;
     private final CommandObjectiveExecutor aG;
     public boolean glowing;
     private final Set<String> aH;
@@ -207,8 +209,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.random = SHARED_RANDOM; // Paper
         this.fireTicks = -this.getMaxFireTicks();
         this.justCreated = true;
-        this.uniqueID = MathHelper.a(this.random);
-        this.ar = this.uniqueID.toString();
+        this.uuid = MathHelper.a(this.random);
+        this.stringUUID = this.uuid.toString();
         this.aG = new CommandObjectiveExecutor();
         this.aH = Sets.newHashSet();
         this.aJ = new double[] { 0.0D, 0.0D, 0.0D};
@@ -472,7 +474,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
                 }
             } else {
                 if (this.fireTicks % 20 == 0) {
-                    this.damageEntity(DamageSource.BURN, 1.0F);
+                    this.hurt(DamageSource.BURN, 1.0F);
                 }
 
                 --this.fireTicks;
@@ -527,7 +529,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     protected void burnFromLava() {
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.LAVA, 4.0F);
+            this.hurt(DamageSource.LAVA, 4.0F);
 
             // CraftBukkit start - Fallen in lava TODO: this event spams!
             if (this instanceof EntityLiving) {
@@ -1100,7 +1102,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
 
     protected void burn(float i) { // CraftBukkit - int -> float
         if (!this.fireProof) {
-            this.damageEntity(DamageSource.FIRE, (float) i);
+            this.hurt(DamageSource.FIRE, (float) i);
         }
 
     }
@@ -1422,8 +1424,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.velocityChanged = true;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
             this.ax();
@@ -1543,7 +1545,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             nbttagcompound.setInt("Dimension", this.dimension);
             nbttagcompound.setBoolean("Invulnerable", this.invulnerable);
             nbttagcompound.setInt("PortalCooldown", this.portalCooldown);
-            nbttagcompound.a("UUID", this.getUniqueID());
+            nbttagcompound.a("UUID", this.getUUID());
             // CraftBukkit start
             // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
             nbttagcompound.setLong("WorldUUIDLeast", this.world.getDataManager().getUUID().getLeastSignificantBits());
@@ -1676,8 +1678,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             this.invulnerable = nbttagcompound.getBoolean("Invulnerable");
             this.portalCooldown = nbttagcompound.getInt("PortalCooldown");
             if (nbttagcompound.b("UUID")) {
-                this.uniqueID = nbttagcompound.a("UUID");
-                this.ar = this.uniqueID.toString();
+                this.uuid = nbttagcompound.a("UUID");
+                this.stringUUID = this.uuid.toString();
             }
 
             this.setPosition(this.locX, this.locY, this.locZ);
@@ -2186,7 +2188,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     @Nullable
     public ScoreboardTeamBase aY() {
         if (!this.world.paperConfig.nonPlayerEntitiesOnScoreboards && !(this instanceof EntityHuman)) { return null; } // Paper
-        return this.world.getScoreboard().getPlayerTeam(this.bn());
+        return this.world.getScoreboard().getPlayerTeam(this.getStringUUID());
     }
 
     public boolean r(Entity entity) {
@@ -2250,7 +2252,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
             return;
         }
         CraftEventFactory.entityDamage = entitylightning;
-        if (!this.damageEntity(DamageSource.LIGHTNING, 5.0F)) {
+        if (!this.hurt(DamageSource.LIGHTNING, 5.0F)) {
             CraftEventFactory.entityDamage = null;
             return;
         }
@@ -2374,22 +2376,22 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public String toString() {
-        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), this.uniqueID.toString(), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead}); // Paper - add more information
+        return String.format("%s[\'%s\'/%d, uuid=\'%s\', l=\'%s\', x=%.2f, y=%.2f, z=%.2f, cx=%d, cd=%d, tl=%d, v=%b, d=%b]", new Object[] { this.getClass().getSimpleName(), this.getName(), Integer.valueOf(this.id), this.uuid.toString(), this.world == null ? "~NULL~" : this.world.getWorldData().getName(), Double.valueOf(this.locX), Double.valueOf(this.locY), Double.valueOf(this.locZ), getChunkX(), getChunkZ(), this.ticksLived, this.valid, this.dead}); // Paper - add more information
     }
 
-    public boolean isInvulnerable(DamageSource damagesource) {
-        return this.invulnerable && damagesource != DamageSource.OUT_OF_WORLD && !damagesource.u();
+    public boolean isInvulnerableTo(DamageSource damageSource) {
+        return invulnerable && damageSource != DamageSource.OUT_OF_WORLD && !damageSource.u();
     }
 
-    public boolean be() {
-        return this.invulnerable;
+    public boolean isInvulnerable() {
+        return invulnerable;
     }
 
-    public void setInvulnerable(boolean flag) {
-        this.invulnerable = flag;
+    public void setInvulnerable(boolean invulnerable) {
+        this.invulnerable = invulnerable;
     }
 
-    public void u(Entity entity) {
+    public void copyPosition(Entity entity) {
         this.setPositionRotation(entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
     }
 
@@ -2627,17 +2629,18 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
     }
 
     public void setUUID(UUID uuid) { a(uuid); } // Paper - OBFHELPER
+
     public void a(UUID uuid) {
-        this.uniqueID = uuid;
-        this.ar = this.uniqueID.toString();
+        this.uuid = uuid;
+        this.stringUUID = this.uuid.toString();
     }
 
-    public UUID getUniqueID() {
-        return this.uniqueID;
+    public UUID getUUID() {
+        return uuid;
     }
 
-    public String bn() {
-        return this.ar;
+    public String getStringUUID() {
+        return stringUUID;
     }
 
     public boolean bo() {
@@ -2653,7 +2656,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         ChatComponentText chatcomponenttext = new ChatComponentText(ScoreboardTeam.getPlayerDisplayName(this.aY(), this.getName()));
 
         chatcomponenttext.getChatModifier().setChatHoverable(this.bv());
-        chatcomponenttext.getChatModifier().setInsertion(this.bn());
+        chatcomponenttext.getChatModifier().setInsertion(this.getStringUUID());
         return chatcomponenttext;
     }
 
@@ -2702,7 +2705,7 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         NBTTagCompound nbttagcompound = new NBTTagCompound();
         MinecraftKey minecraftkey = EntityTypes.a(this);
 
-        nbttagcompound.setString("id", this.bn());
+        nbttagcompound.setString("id", this.getStringUUID());
         if (minecraftkey != null) {
             nbttagcompound.setString("type", minecraftkey.toString());
         }
@@ -2804,8 +2807,8 @@ public abstract class Entity implements ICommandListener, KeyedObject { // Paper
         this.aG.a(entity.bA());
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, Vec3D vec3d, EnumHand enumhand) {
-        return EnumInteractionResult.PASS;
+    public InteractionResult a(EntityHuman entityhuman, Vec3D vec3d, EnumHand enumhand) {
+        return InteractionResult.PASS;
     }
 
     public boolean bB() {
diff --git a/src/main/java/net/minecraft/server/EntityAgeable.java b/src/main/java/net/minecraft/server/EntityAgeable.java
index db23aedc4..b3f3ef8c7 100644
--- a/src/main/java/net/minecraft/server/EntityAgeable.java
+++ b/src/main/java/net/minecraft/server/EntityAgeable.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.item.ItemMonsterEgg;
+
 import javax.annotation.Nullable;
 
 public abstract class EntityAgeable extends EntityCreature {
@@ -49,7 +51,7 @@ public abstract class EntityAgeable extends EntityCreature {
 
         if (itemstack.getItem() == Items.SPAWN_EGG) {
             if (!this.world.isClientSide) {
-                Class oclass = (Class) EntityTypes.b.get(ItemMonsterEgg.h(itemstack));
+                Class oclass = (Class) EntityTypes.b.get(net.minecraft.world.item.ItemMonsterEgg.h(itemstack));
 
                 if (oclass != null && this.getClass() == oclass) {
                     EntityAgeable entityageable = this.createChild(this);
diff --git a/src/main/java/net/minecraft/server/EntityAnimal.java b/src/main/java/net/minecraft/server/EntityAnimal.java
index b768434ed..ce72b3525 100644
--- a/src/main/java/net/minecraft/server/EntityAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityAnimal.java
@@ -133,7 +133,7 @@ public abstract class EntityAnimal extends EntityAgeable implements IAnimal {
     public void f(@Nullable EntityHuman entityhuman) {
         this.bx = 600;
         if (entityhuman != null) {
-            this.by = entityhuman.getUniqueID();
+            this.by = entityhuman.getUUID();
         }
         this.breedItem = entityhuman.inventory.getItemInHand(); // CraftBukkit
 
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
index 836d368b4..2c62ec187 100644
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -371,7 +371,7 @@ public class EntityAreaEffectCloud extends Entity {
 
     public void setSource(@Nullable EntityLiving entityliving) {
         this.aB = entityliving;
-        this.aC = entityliving == null ? null : entityliving.getUniqueID();
+        this.aC = entityliving == null ? null : entityliving.getUUID();
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 907499248..1ee79a796 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -6,6 +6,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import net.minecraft.world.InteractionResult;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -324,7 +325,7 @@ public class EntityArmorStand extends EntityLiving {
 
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, Vec3D vec3d, EnumHand enumhand) {
+    public InteractionResult a(EntityHuman entityhuman, Vec3D vec3d, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!this.isMarker() && itemstack.getItem() != Items.NAME_TAG) {
@@ -340,22 +341,22 @@ public class EntityArmorStand extends EntityLiving {
                     }
                 } else {
                     if (this.c(enumitemslot)) {
-                        return EnumInteractionResult.FAIL;
+                        return InteractionResult.FAIL;
                     }
 
                     if (enumitemslot.a() == EnumItemSlot.Function.HAND && !this.hasArms()) {
-                        return EnumInteractionResult.FAIL;
+                        return InteractionResult.FAIL;
                     }
 
                     this.a(entityhuman, enumitemslot, itemstack, enumhand);
                 }
 
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             } else {
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             }
         } else {
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         }
     }
 
@@ -423,22 +424,22 @@ public class EntityArmorStand extends EntityLiving {
         }
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         // CraftBukkit start
-        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
             return false;
         }
         // CraftBukkit end
         if (!this.world.isClientSide && !this.dead) {
-            if (DamageSource.OUT_OF_WORLD.equals(damagesource)) {
+            if (DamageSource.OUT_OF_WORLD.equals(source)) {
                 this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
                 return false;
-            } else if (!this.isInvulnerable(damagesource) && !this.bA && !this.isMarker()) {
-                if (damagesource.isExplosion()) {
+            } else if (!this.isInvulnerableTo(source) && !this.bA && !this.isMarker()) {
+                if (source.isExplosion()) {
                     this.F();
                     this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
                     return false;
-                } else if (DamageSource.FIRE.equals(damagesource)) {
+                } else if (DamageSource.FIRE.equals(source)) {
                     if (this.isBurning()) {
                         this.a(0.15F);
                     } else {
@@ -446,23 +447,23 @@ public class EntityArmorStand extends EntityLiving {
                     }
 
                     return false;
-                } else if (DamageSource.BURN.equals(damagesource) && this.getHealth() > 0.5F) {
+                } else if (DamageSource.BURN.equals(source) && this.getHealth() > 0.5F) {
                     this.a(4.0F);
                     return false;
                 } else {
-                    boolean flag = "arrow".equals(damagesource.p());
-                    boolean flag1 = "player".equals(damagesource.p());
+                    boolean flag = "arrow".equals(source.p());
+                    boolean flag1 = "player".equals(source.p());
 
                     if (!flag1 && !flag) {
                         return false;
                     } else {
-                        if (damagesource.i() instanceof EntityArrow) {
-                            damagesource.i().die();
+                        if (source.i() instanceof EntityArrow) {
+                            source.i().die();
                         }
 
-                        if (damagesource.getEntity() instanceof EntityHuman && !((EntityHuman) damagesource.getEntity()).abilities.mayBuild) {
+                        if (source.getEntity() instanceof EntityHuman && !((EntityHuman) source.getEntity()).abilities.mayBuild) {
                             return false;
-                        } else if (damagesource.u()) {
+                        } else if (source.u()) {
                             this.H();
                             this.D();
                             this.killEntity(); // CraftBukkit - this.die() -> this.killEntity()
diff --git a/src/main/java/net/minecraft/server/EntityArrow.java b/src/main/java/net/minecraft/server/EntityArrow.java
index 8a9e16ad6..f66c36465 100644
--- a/src/main/java/net/minecraft/server/EntityArrow.java
+++ b/src/main/java/net/minecraft/server/EntityArrow.java
@@ -292,7 +292,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
                 // CraftBukkit end
             }
 
-            if (entity.damageEntity(damagesource, (float) i)) {
+            if (entity.hurt(damagesource, (float) i)) {
                 if (entity instanceof EntityLiving) {
                     EntityLiving entityliving = (EntityLiving) entity;
 
@@ -531,7 +531,7 @@ public abstract class EntityArrow extends Entity implements IProjectile {
         int i = EnchantmentManager.a(Enchantments.ARROW_DAMAGE, entityliving);
         int j = EnchantmentManager.a(Enchantments.ARROW_KNOCKBACK, entityliving);
 
-        this.c((double) (f * 2.0F) + this.random.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().a() * 0.11F));
+        this.c((double) (f * 2.0F) + this.random.nextGaussian() * 0.25D + (double) ((float) this.world.getDifficulty().getId() * 0.11F));
         if (i > 0) {
             this.c(this.k() + (double) i * 0.5D + 0.5D);
         }
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 164e21fe8..ecb83b154 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -105,18 +105,18 @@ public class EntityBoat extends Entity {
         return -0.1D;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else if (!this.world.isClientSide && !this.dead) {
-            if (damagesource instanceof EntityDamageSourceIndirect && damagesource.getEntity() != null && this.w(damagesource.getEntity())) {
+            if (source instanceof EntityDamageSourceIndirect && source.getEntity() != null && this.w(source.getEntity())) {
                 return false;
             } else {
                 // CraftBukkit start
                 Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-                org.bukkit.entity.Entity attacker = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
+                org.bukkit.entity.Entity attacker = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
 
-                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) f);
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) amount);
                 this.world.getServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
@@ -127,9 +127,9 @@ public class EntityBoat extends Entity {
 
                 this.d(-this.r());
                 this.c(10);
-                this.setDamage(this.p() + f * 10.0F);
+                this.setDamage(this.p() + amount * 10.0F);
                 this.ax();
-                boolean flag = damagesource.getEntity() instanceof EntityHuman && ((EntityHuman) damagesource.getEntity()).abilities.canInstantlyBuild;
+                boolean flag = source.getEntity() instanceof EntityHuman && ((EntityHuman) source.getEntity()).abilities.canInstantlyBuild;
 
                 if (flag || this.p() > 40.0F) {
                     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EntityEgg.java b/src/main/java/net/minecraft/server/EntityEgg.java
index 08131afc9..058c54577 100644
--- a/src/main/java/net/minecraft/server/EntityEgg.java
+++ b/src/main/java/net/minecraft/server/EntityEgg.java
@@ -27,7 +27,7 @@ public class EntityEgg extends EntityProjectile {
 
     protected void a(MovingObjectPosition movingobjectposition) {
         if (movingobjectposition.entity != null) {
-            movingobjectposition.entity.damageEntity(DamageSource.projectile(this, this.getShooter()), 0.0F);
+            movingobjectposition.entity.hurt(DamageSource.projectile(this, this.getShooter()), 0.0F);
         }
 
         if (!this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderDragon.java b/src/main/java/net/minecraft/server/EntityEnderDragon.java
index c925de971..9e76189b1 100644
--- a/src/main/java/net/minecraft/server/EntityEnderDragon.java
+++ b/src/main/java/net/minecraft/server/EntityEnderDragon.java
@@ -3,6 +3,8 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
@@ -30,7 +32,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
     public float bF;
     public boolean bG;
     public int bH;
-    public EntityEnderCrystal currentEnderCrystal;
+    public net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal currentEnderCrystal;
     private final EnderDragonBattle bK;
     private final DragonControllerManager bL;
     private int bM = 200;
@@ -345,13 +347,13 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
 
         if (this.random.nextInt(10) == 0) {
-            List list = this.world.a(EntityEnderCrystal.class, this.getBoundingBox().g(32.0D));
-            EntityEnderCrystal entityendercrystal = null;
+            List list = this.world.a(net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal.class, this.getBoundingBox().g(32.0D));
+            net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal entityendercrystal = null;
             double d0 = Double.MAX_VALUE;
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
-                EntityEnderCrystal entityendercrystal1 = (EntityEnderCrystal) iterator.next();
+                net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal entityendercrystal1 = (net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal) iterator.next();
                 double d1 = entityendercrystal1.h(this);
 
                 if (d1 < d0) {
@@ -380,7 +382,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
 
                 entity.f(d2 / d4 * 4.0D, 0.20000000298023224D, d3 / d4 * 4.0D);
                 if (!this.bL.a().a() && ((EntityLiving) entity).bT() < entity.ticksLived - 2) {
-                    entity.damageEntity(DamageSource.mobAttack(this), 5.0F);
+                    entity.hurt(DamageSource.mobAttack(this), 5.0F);
                     this.a((EntityLiving) this, entity);
                 }
             }
@@ -393,7 +395,7 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
             Entity entity = (Entity) list.get(i);
 
             if (entity instanceof EntityLiving) {
-                entity.damageEntity(DamageSource.mobAttack(this), 10.0F);
+                entity.hurt(DamageSource.mobAttack(this), 10.0F);
                 this.a((EntityLiving) this, entity);
             }
         }
@@ -523,16 +525,16 @@ public class EntityEnderDragon extends EntityInsentient implements IComplex, IMo
         }
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (damagesource instanceof EntityDamageSource && ((EntityDamageSource) damagesource).x()) {
-            this.a(this.by, damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        if (source instanceof EntityDamageSource && ((EntityDamageSource) source).x()) {
+            this.a(this.by, source, amount);
         }
 
         return false;
     }
 
     protected boolean dealDamage(DamageSource damagesource, float f) {
-        return super.damageEntity(damagesource, f);
+        return super.hurt(damagesource, f);
     }
 
     public void killEntity() {
diff --git a/src/main/java/net/minecraft/server/EntityEnderPearl.java b/src/main/java/net/minecraft/server/EntityEnderPearl.java
index 20c495cbd..ecc4c9481 100644
--- a/src/main/java/net/minecraft/server/EntityEnderPearl.java
+++ b/src/main/java/net/minecraft/server/EntityEnderPearl.java
@@ -33,7 +33,7 @@ public class EntityEnderPearl extends EntityProjectile {
                 return;
             }
 
-            movingobjectposition.entity.damageEntity(DamageSource.projectile(this, entityliving), 0.0F);
+            movingobjectposition.entity.hurt(DamageSource.projectile(this, entityliving), 0.0F);
         }
 
         if (movingobjectposition.type == MovingObjectPosition.EnumMovingObjectType.BLOCK) {
@@ -92,7 +92,7 @@ public class EntityEnderPearl extends EntityProjectile {
                         entityplayer.playerConnection.teleport(teleEvent.getTo());
                         entityliving.fallDistance = 0.0F;
                         CraftEventFactory.entityDamage = this;
-                        entityliving.damageEntity(DamageSource.FALL, 5.0F);
+                        entityliving.hurt(DamageSource.FALL, 5.0F);
                         CraftEventFactory.entityDamage = null;
                     }
                     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index 2472edfc9..2ee1598ca 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -191,7 +191,7 @@ public class EntityEnderman extends EntityMonster {
 
     protected void M() {
         if (this.an()) {
-            this.damageEntity(DamageSource.DROWN, 1.0F);
+            this.hurt(DamageSource.DROWN, 1.0F);
         }
 
         if (this.world.D() && this.ticksLived >= this.bA + 600) {
@@ -277,10 +277,10 @@ public class EntityEnderman extends EntityMonster {
         return (IBlockData) ((Optional) this.datawatcher.get(EntityEnderman.bx)).orNull();
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (damagesource instanceof EntityDamageSourceIndirect && tryEscape(EndermanEscapeEvent.Reason.INDIRECT)) { // Paper
+        } else if (source instanceof EntityDamageSourceIndirect && tryEscape(EndermanEscapeEvent.Reason.INDIRECT)) { // Paper
             for (int i = 0; i < 64; ++i) {
                 if (this.dm()) {
                     return true;
@@ -289,9 +289,9 @@ public class EntityEnderman extends EntityMonster {
 
             return false;
         } else {
-            boolean flag = super.damageEntity(damagesource, f);
+            boolean flag = super.hurt(source, amount);
 
-            if (damagesource.ignoresArmor() && this.random.nextInt(10) != 0 && tryEscape(damagesource == DamageSource.DROWN ? EndermanEscapeEvent.Reason.DROWN : EndermanEscapeEvent.Reason.CRITICAL_HIT)) { // Paper
+            if (source.ignoresArmor() && this.random.nextInt(10) != 0 && tryEscape(source == DamageSource.DROWN ? EndermanEscapeEvent.Reason.DROWN : EndermanEscapeEvent.Reason.CRITICAL_HIT)) { // Paper
                 this.dm();
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityEvokerFangs.java b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
index 189511226..c1f367525 100644
--- a/src/main/java/net/minecraft/server/EntityEvokerFangs.java
+++ b/src/main/java/net/minecraft/server/EntityEvokerFangs.java
@@ -32,7 +32,7 @@ public class EntityEvokerFangs extends Entity {
 
     public void a(@Nullable EntityLiving entityliving) {
         this.e = entityliving;
-        this.f = entityliving == null ? null : entityliving.getUniqueID();
+        this.f = entityliving == null ? null : entityliving.getUUID();
     }
 
     @Nullable
@@ -106,17 +106,17 @@ public class EntityEvokerFangs extends Entity {
     private void c(EntityLiving entityliving) {
         EntityLiving entityliving1 = this.getOwner();
 
-        if (entityliving.isAlive() && !entityliving.be() && entityliving != entityliving1) {
+        if (entityliving.isAlive() && !entityliving.isInvulnerable() && entityliving != entityliving1) {
             if (entityliving1 == null) {
                 org.bukkit.craftbukkit.event.CraftEventFactory.entityDamage = this; // CraftBukkit
-                entityliving.damageEntity(DamageSource.MAGIC, 6.0F);
+                entityliving.hurt(DamageSource.MAGIC, 6.0F);
                 org.bukkit.craftbukkit.event.CraftEventFactory.entityDamage = null; // CraftBukkit
             } else {
                 if (entityliving1.r(entityliving)) {
                     return;
                 }
 
-                entityliving.damageEntity(DamageSource.b(this, entityliving1), 6.0F);
+                entityliving.hurt(DamageSource.b(this, entityliving1), 6.0F);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/EntityExperienceOrb.java b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
index becb102c1..62f8c24b0 100644
--- a/src/main/java/net/minecraft/server/EntityExperienceOrb.java
+++ b/src/main/java/net/minecraft/server/EntityExperienceOrb.java
@@ -59,8 +59,8 @@ public class EntityExperienceOrb extends Entity {
 
     public EntityExperienceOrb(World world, double d0, double d1, double d2, int i, org.bukkit.entity.ExperienceOrb.SpawnReason reason, Entity triggerId, Entity sourceId) {
         super(world);
-        this.sourceEntityId = sourceId != null ? sourceId.getUniqueID() : null;
-        this.triggerEntityId = triggerId != null ? triggerId.getUniqueID() : null;
+        this.sourceEntityId = sourceId != null ? sourceId.getUUID() : null;
+        this.triggerEntityId = triggerId != null ? triggerId.getUUID() : null;
         this.spawnReason = reason != null ? reason : org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
         // Paper end
         this.setSize(0.5F, 0.5F);
@@ -173,15 +173,15 @@ public class EntityExperienceOrb extends Entity {
     }
 
     protected void burn(int i) {
-        this.damageEntity(DamageSource.FIRE, (float) i);
+        this.hurt(DamageSource.FIRE, (float) i);
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
             this.ax();
-            this.d = (int) ((float) this.d - f);
+            this.d = (int) ((float) this.d - amount);
             if (this.d <= 0) {
                 this.die();
             }
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index eeaa625d2..e679c3173 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -224,7 +224,7 @@ public class EntityFallingBlock extends Entity {
                     Entity entity = (Entity) iterator.next();
 
                     CraftEventFactory.entityDamage = this; // CraftBukkit
-                    entity.damageEntity(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
+                    entity.hurt(damagesource, (float) Math.min(MathHelper.d((float) i * this.fallHurtAmount), this.fallHurtMax));
                     CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityFireball.java b/src/main/java/net/minecraft/server/EntityFireball.java
index 657b3b5ac..b46795c34 100644
--- a/src/main/java/net/minecraft/server/EntityFireball.java
+++ b/src/main/java/net/minecraft/server/EntityFireball.java
@@ -170,18 +170,18 @@ public abstract class EntityFireball extends Entity {
         return 1.0F;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
             this.ax();
-            if (damagesource.getEntity() != null) {
+            if (source.getEntity() != null) {
                 // CraftBukkit start
-                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
+                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
                     return false;
                 }
                 // CraftBukkit end
-                Vec3D vec3d = damagesource.getEntity().aJ();
+                Vec3D vec3d = source.getEntity().aJ();
 
                 if (vec3d != null) {
                     this.motX = vec3d.x;
@@ -192,8 +192,8 @@ public abstract class EntityFireball extends Entity {
                     this.dirZ = this.motZ * 0.1D;
                 }
 
-                if (damagesource.getEntity() instanceof EntityLiving) {
-                    this.shooter = (EntityLiving) damagesource.getEntity();
+                if (source.getEntity() instanceof EntityLiving) {
+                    this.shooter = (EntityLiving) source.getEntity();
                     this.projectileSource = (org.bukkit.projectiles.ProjectileSource) this.shooter.getBukkitEntity();
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index bd0ec95f2..ec19dc8e3 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -153,7 +153,7 @@ public class EntityFireworks extends Entity {
         if (f > 0.0F) {
             if (this.e != null) {
                 CraftEventFactory.entityDamage = this; // CraftBukkit
-                this.e.damageEntity(DamageSource.t, (float) (5 + nbttaglist.size() * 2));
+                this.e.hurt(DamageSource.t, (float) (5 + nbttaglist.size() * 2));
                 CraftEventFactory.entityDamage = null; // CraftBukkit
             }
 
@@ -181,7 +181,7 @@ public class EntityFireworks extends Entity {
                         float f1 = f * (float) Math.sqrt((5.0D - (double) this.g(entityliving)) / 5.0D);
 
                         CraftEventFactory.entityDamage = this; // CraftBukkit
-                        entityliving.damageEntity(DamageSource.t, f1);
+                        entityliving.hurt(DamageSource.t, f1);
                         CraftEventFactory.entityDamage = null; // CraftBukkit
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/EntityGhast.java b/src/main/java/net/minecraft/server/EntityGhast.java
index 30ca03977..a2ad4c62c 100644
--- a/src/main/java/net/minecraft/server/EntityGhast.java
+++ b/src/main/java/net/minecraft/server/EntityGhast.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
+
 import java.util.Random;
 import javax.annotation.Nullable;
 
@@ -33,20 +35,20 @@ public class EntityGhast extends EntityFlying implements IMonster {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (!this.world.isClientSide && this.world.getDifficulty() == Difficulty.PEACEFUL) {
             this.die();
         }
 
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+        if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else if (damagesource.i() instanceof EntityLargeFireball && damagesource.getEntity() instanceof EntityHuman) {
-            super.damageEntity(damagesource, 1000.0F);
+            super.hurt(damagesource, 1000.0F);
             return true;
         } else {
-            return super.damageEntity(damagesource, f);
+            return super.hurt(damagesource, f);
         }
     }
 
@@ -87,7 +89,7 @@ public class EntityGhast extends EntityFlying implements IMonster {
     }
 
     public boolean P() {
-        return this.random.nextInt(20) == 0 && super.P() && this.world.getDifficulty() != EnumDifficulty.PEACEFUL;
+        return this.random.nextInt(20) == 0 && super.P() && this.world.getDifficulty() != Difficulty.PEACEFUL;
     }
 
     public int cU() {
diff --git a/src/main/java/net/minecraft/server/EntityHanging.java b/src/main/java/net/minecraft/server/EntityHanging.java
index cc903e1ea..809ebd7cc 100644
--- a/src/main/java/net/minecraft/server/EntityHanging.java
+++ b/src/main/java/net/minecraft/server/EntityHanging.java
@@ -161,23 +161,23 @@ public abstract class EntityHanging extends Entity {
     }
 
     public boolean t(Entity entity) {
-        return entity instanceof EntityHuman ? this.damageEntity(DamageSource.playerAttack((EntityHuman) entity), 0.0F) : false;
+        return entity instanceof EntityHuman ? this.hurt(DamageSource.playerAttack((EntityHuman) entity), 0.0F) : false;
     }
 
     public EnumDirection getDirection() {
         return this.direction;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
             if (!this.dead && !this.world.isClientSide) {
                 // CraftBukkit start - fire break events
                 HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.DEFAULT);
-                if (damagesource.getEntity() != null) {
-                    event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damagesource.getEntity() == null ? null : damagesource.getEntity().getBukkitEntity(), damagesource.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
-                } else if (damagesource.isExplosion()) {
+                if (source.getEntity() != null) {
+                    event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), source.getEntity() == null ? null : source.getEntity().getBukkitEntity(), source.isExplosion() ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
+                } else if (source.isExplosion()) {
                     event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.EXPLOSION);
                 }
 
@@ -190,7 +190,7 @@ public abstract class EntityHanging extends Entity {
 
                 this.die();
                 this.ax();
-                this.a(damagesource.getEntity());
+                this.a(source.getEntity());
             }
 
             return true;
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index dcc39236f..76ac0f24a 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -160,10 +160,10 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         return j;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        Entity entity = damagesource.getEntity();
+    public boolean hurt(DamageSource source, float amount) {
+        Entity entity = source.getEntity();
 
-        return this.isVehicle() && entity != null && this.y(entity) ? false : super.damageEntity(damagesource, f);
+        return this.isVehicle() && entity != null && this.y(entity) ? false : super.hurt(source, amount);
     }
 
     public boolean isCollidable() {
@@ -186,14 +186,14 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         int i = MathHelper.f((f * 0.5F - 3.0F) * f1);
 
         if (i > 0) {
-            this.damageEntity(DamageSource.FALL, (float) i);
+            this.hurt(DamageSource.FALL, (float) i);
             if (this.isVehicle()) {
                 Iterator iterator = this.bG().iterator();
 
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
 
-                    entity.damageEntity(DamageSource.FALL, (float) i);
+                    entity.hurt(DamageSource.FALL, (float) i);
                 }
             }
 
@@ -628,7 +628,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     public boolean h(EntityHuman entityhuman) {
-        this.setOwnerUUID(entityhuman.getUniqueID());
+        this.setOwnerUUID(entityhuman.getUUID());
         this.setTamed(true);
         if (entityhuman instanceof EntityPlayer) {
             CriterionTriggers.w.a((EntityPlayer) entityhuman, (EntityAnimal) this);
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index aa0b27f0e..86e0a0d3c 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -10,6 +10,9 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.item.ItemArmor;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.entity.Player;
@@ -340,7 +343,7 @@ public abstract class EntityHuman extends EntityLiving {
             --this.bA;
         }
 
-        if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
+        if (this.world.getDifficulty() == Difficulty.PEACEFUL && this.world.getGameRules().getBoolean("naturalRegeneration")) {
             if (this.getHealth() < this.getMaxHealth() && this.ticksLived % 20 == 0) {
                 // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
                 this.heal(1.0F, org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.REGEN);
@@ -740,10 +743,10 @@ public abstract class EntityHuman extends EntityLiving {
 
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (this.abilities.isInvulnerable && !damagesource.ignoresInvulnerability()) {
+        } else if (this.abilities.isInvulnerable && !source.ignoresInvulnerability()) {
             return false;
         } else {
             this.ticksFarFromPlayer = 0;
@@ -755,22 +758,22 @@ public abstract class EntityHuman extends EntityLiving {
                 }
 
                 // this.releaseShoulderEntities(); // CraftBukkit - moved down
-                if (damagesource.r()) {
-                    if (this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+                if (source.r()) {
+                    if (this.world.getDifficulty() == Difficulty.PEACEFUL) {
                         return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
-                    if (this.world.getDifficulty() == EnumDifficulty.EASY) {
-                        f = Math.min(f / 2.0F + 1.0F, f);
+                    if (this.world.getDifficulty() == Difficulty.EASY) {
+                        amount = Math.min(amount / 2.0F + 1.0F, amount);
                     }
 
-                    if (this.world.getDifficulty() == EnumDifficulty.HARD) {
-                        f = f * 3.0F / 2.0F;
+                    if (this.world.getDifficulty() == Difficulty.HARD) {
+                        amount = amount * 3.0F / 2.0F;
                     }
                 }
 
                 // CraftBukkit start - Don't filter out 0 damage
-                boolean damaged = super.damageEntity(damagesource, f);
+                boolean damaged = super.hurt(source, amount);
                 if (damaged) {
                     this.releaseShoulderEntities();
                 }
@@ -860,7 +863,7 @@ public abstract class EntityHuman extends EntityLiving {
             return super.damageEntity0(damagesource, f);
         }
         // CraftBukkit end
-        if (!this.isInvulnerable(damagesource)) {
+        if (!this.isInvulnerableTo(damagesource)) {
             f = this.applyArmorModifier(damagesource, f);
             f = this.applyMagicModifier(damagesource, f);
             float f1 = f;
@@ -900,13 +903,13 @@ public abstract class EntityHuman extends EntityLiving {
 
     public void a(ItemStack itemstack, EnumHand enumhand) {}
 
-    public EnumInteractionResult a(Entity entity, EnumHand enumhand) {
+    public InteractionResult a(Entity entity, EnumHand enumhand) {
         if (this.isSpectator()) {
             if (entity instanceof IInventory) {
                 this.openContainer((IInventory) entity);
             }
 
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         } else {
             ItemStack itemstack = this.b(enumhand);
             ItemStack itemstack1 = itemstack.isEmpty() ? ItemStack.a : itemstack.cloneItemStack();
@@ -916,7 +919,7 @@ public abstract class EntityHuman extends EntityLiving {
                     itemstack.setCount(itemstack1.getCount());
                 }
 
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             } else {
                 if (!itemstack.isEmpty() && entity instanceof EntityLiving) {
                     if (this.abilities.canInstantlyBuild) {
@@ -928,11 +931,11 @@ public abstract class EntityHuman extends EntityLiving {
                             this.a(enumhand, ItemStack.a);
                         }
 
-                        return EnumInteractionResult.SUCCESS;
+                        return InteractionResult.SUCCESS;
                     }
                 }
 
-                return EnumInteractionResult.PASS;
+                return InteractionResult.PASS;
             }
         }
     }
@@ -1025,7 +1028,7 @@ public abstract class EntityHuman extends EntityLiving {
                     double d1 = entity.motX;
                     double d2 = entity.motY;
                     double d3 = entity.motZ;
-                    boolean flag5 = entity.damageEntity(DamageSource.playerAttack(this), f);
+                    boolean flag5 = entity.hurt(DamageSource.playerAttack(this), f);
 
                     if (flag5) {
                         if (i > 0) {
@@ -1054,7 +1057,7 @@ public abstract class EntityHuman extends EntityLiving {
 
                                 if (entityliving != this && entityliving != entity && !this.r(entityliving) && this.h(entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
-                                    if (entityliving.damageEntity(DamageSource.playerAttack(this).sweep(), f4)) {
+                                    if (entityliving.hurt(DamageSource.playerAttack(this).sweep(), f4)) {
                                     entityliving.a(this, 0.4F, (double) MathHelper.sin(this.yaw * 0.017453292F), (double) (-MathHelper.cos(this.yaw * 0.017453292F)));
                                     }
                                     // CraftBukkit end
@@ -1772,7 +1775,7 @@ public abstract class EntityHuman extends EntityLiving {
             }
 
             if (entity instanceof EntityTameableAnimal) {
-                ((EntityTameableAnimal) entity).setOwnerUUID(this.uniqueID);
+                ((EntityTameableAnimal) entity).setOwnerUUID(this.uuid);
             }
 
             entity.setPosition(this.locX, this.locY + 0.699999988079071D, this.locZ);
diff --git a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
index ad81bd059..46606a994 100644
--- a/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
+++ b/src/main/java/net/minecraft/server/EntityIllagerIllusioner.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
+
 import javax.annotation.Nullable;
 
 public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRangedEntity {
@@ -122,7 +124,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         double d2 = entityliving.locZ - this.locZ;
         double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
 
-        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().getId() * 4));
         // Paper start
         org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getItemInMainHand(), this.getItemInOffHand(), entityarrow,0.8F);
         if (event.isCancelled()) {
@@ -157,7 +159,7 @@ public class EntityIllagerIllusioner extends EntityIllagerWizard implements IRan
         }
 
         public boolean a() {
-            return !super.a() ? false : (EntityIllagerIllusioner.this.getGoalTarget() == null ? false : (EntityIllagerIllusioner.this.getGoalTarget().getId() == this.b ? false : EntityIllagerIllusioner.this.world.D(new BlockPosition(EntityIllagerIllusioner.this)).a((float) EnumDifficulty.NORMAL.ordinal())));
+            return !super.a() ? false : (EntityIllagerIllusioner.this.getGoalTarget() == null ? false : (EntityIllagerIllusioner.this.getGoalTarget().getId() == this.b ? false : EntityIllagerIllusioner.this.world.D(new BlockPosition(EntityIllagerIllusioner.this)).a((float) Difficulty.NORMAL.ordinal())));
         }
 
         public void c() {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index d6a1933ad..18a5506f7 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -10,6 +10,9 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.item.ItemArmor;
+import net.minecraft.world.item.ItemBow;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.LivingEntity;
@@ -356,7 +359,7 @@ public abstract class EntityInsentient extends EntityLiving {
         if (this.leashHolder != null) {
             nbttagcompound2 = new NBTTagCompound();
             if (this.leashHolder instanceof EntityLiving) {
-                UUID uuid = this.leashHolder.getUniqueID();
+                UUID uuid = this.leashHolder.getUUID();
 
                 nbttagcompound2.a("UUID", uuid);
             } else if (this.leashHolder instanceof EntityHanging) {
@@ -548,16 +551,16 @@ public abstract class EntityInsentient extends EntityLiving {
                     } else {
                         flag = itemsword.g() > itemsword1.g();
                     }
-                } else if (itemstack.getItem() instanceof ItemBow && itemstack1.getItem() instanceof ItemBow) {
+                } else if (itemstack.getItem() instanceof net.minecraft.world.item.ItemBow && itemstack1.getItem() instanceof ItemBow) {
                     flag = itemstack.hasTag() && !itemstack1.hasTag();
                 } else {
                     flag = false;
                 }
-            } else if (itemstack.getItem() instanceof ItemArmor && !(itemstack1.getItem() instanceof ItemArmor)) {
+            } else if (itemstack.getItem() instanceof net.minecraft.world.item.ItemArmor && !(itemstack1.getItem() instanceof net.minecraft.world.item.ItemArmor)) {
                 flag = true;
-            } else if (itemstack.getItem() instanceof ItemArmor && itemstack1.getItem() instanceof ItemArmor && !EnchantmentManager.d(itemstack1)) {
-                ItemArmor itemarmor = (ItemArmor) itemstack.getItem();
-                ItemArmor itemarmor1 = (ItemArmor) itemstack1.getItem();
+            } else if (itemstack.getItem() instanceof net.minecraft.world.item.ItemArmor && itemstack1.getItem() instanceof net.minecraft.world.item.ItemArmor && !EnchantmentManager.d(itemstack1)) {
+                net.minecraft.world.item.ItemArmor itemarmor = (net.minecraft.world.item.ItemArmor) itemstack.getItem();
+                net.minecraft.world.item.ItemArmor itemarmor1 = (net.minecraft.world.item.ItemArmor) itemstack1.getItem();
 
                 if (itemarmor.d == itemarmor1.d) {
                     flag = itemstack.getData() > itemstack1.getData() || itemstack.hasTag() && !itemstack1.hasTag();
@@ -767,7 +770,7 @@ public abstract class EntityInsentient extends EntityLiving {
         } else {
             int i = (int) (this.getHealth() - this.getMaxHealth() * 0.33F);
 
-            i -= (3 - this.world.getDifficulty().a()) * 4;
+            i -= (3 - this.world.getDifficulty().getId()) * 4;
             if (i < 0) {
                 i = 0;
             }
@@ -847,7 +850,7 @@ public abstract class EntityInsentient extends EntityLiving {
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
         if (this.random.nextFloat() < 0.15F * difficultydamagescaler.d()) {
             int i = this.random.nextInt(2);
-            float f = this.world.getDifficulty() == EnumDifficulty.HARD ? 0.1F : 0.25F;
+            float f = this.world.getDifficulty() == Difficulty.HARD ? 0.1F : 0.25F;
 
             if (this.random.nextFloat() < 0.095F) {
                 ++i;
@@ -890,7 +893,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public static EnumItemSlot d(ItemStack itemstack) {
-        return itemstack.getItem() != Item.getItemOf(Blocks.PUMPKIN) && itemstack.getItem() != Items.SKULL ? (itemstack.getItem() instanceof ItemArmor ? ((ItemArmor) itemstack.getItem()).c : (itemstack.getItem() == Items.cS ? EnumItemSlot.CHEST : (itemstack.getItem() == Items.SHIELD ? EnumItemSlot.OFFHAND : EnumItemSlot.MAINHAND))) : EnumItemSlot.HEAD;
+        return itemstack.getItem() != Item.getItemOf(Blocks.PUMPKIN) && itemstack.getItem() != Items.SKULL ? (itemstack.getItem() instanceof net.minecraft.world.item.ItemArmor ? ((ItemArmor) itemstack.getItem()).c : (itemstack.getItem() == Items.cS ? EnumItemSlot.CHEST : (itemstack.getItem() == Items.SHIELD ? EnumItemSlot.OFFHAND : EnumItemSlot.MAINHAND))) : EnumItemSlot.HEAD;
     }
 
     @Nullable
@@ -1134,7 +1137,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 while (iterator.hasNext()) {
                     EntityLiving entityliving = (EntityLiving) iterator.next();
 
-                    if (entityliving.getUniqueID().equals(uuid)) {
+                    if (entityliving.getUUID().equals(uuid)) {
                         this.setLeashHolder(entityliving, true);
                         break;
                     }
diff --git a/src/main/java/net/minecraft/server/EntityIronGolem.java b/src/main/java/net/minecraft/server/EntityIronGolem.java
index 072d20bf4..91d927ee2 100644
--- a/src/main/java/net/minecraft/server/EntityIronGolem.java
+++ b/src/main/java/net/minecraft/server/EntityIronGolem.java
@@ -123,7 +123,7 @@ public class EntityIronGolem extends EntityGolem {
     public boolean B(Entity entity) {
         this.bx = 10;
         this.world.broadcastEntityEffect(this, (byte) 4);
-        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) (7 + this.random.nextInt(15)));
+        boolean flag = entity.hurt(DamageSource.mobAttack(this), (float) (7 + this.random.nextInt(15)));
 
         if (flag) {
             entity.motY += 0.4000000059604645D;
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index 4fafb4977..9acd6afae 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -261,22 +261,22 @@ public class EntityItem extends Entity implements HopperPusher {
     }
 
     protected void burn(int i) {
-        this.damageEntity(DamageSource.FIRE, (float) i);
+        this.hurt(DamageSource.FIRE, (float) i);
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (!this.getItemStack().isEmpty() && this.getItemStack().getItem() == Items.NETHER_STAR && damagesource.isExplosion()) {
+        } else if (!this.getItemStack().isEmpty() && this.getItemStack().getItem() == Items.NETHER_STAR && source.isExplosion()) {
             return false;
         } else {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
                 return false;
             }
             // CraftBukkit end
             this.ax();
-            this.f = (int) ((float) this.f - f);
+            this.f = (int) ((float) this.f - amount);
             if (this.f <= 0) {
                 this.die();
             }
diff --git a/src/main/java/net/minecraft/server/EntityItemFrame.java b/src/main/java/net/minecraft/server/EntityItemFrame.java
index f0d6d6b85..b16fecc39 100644
--- a/src/main/java/net/minecraft/server/EntityItemFrame.java
+++ b/src/main/java/net/minecraft/server/EntityItemFrame.java
@@ -30,24 +30,24 @@ public class EntityItemFrame extends EntityHanging {
         return 0.0F;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (!damagesource.isExplosion() && !this.getItem().isEmpty()) {
+        } else if (!source.isExplosion() && !this.getItem().isEmpty()) {
             if (!this.world.isClientSide) {
                 // CraftBukkit start - fire EntityDamageEvent
-                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f, false) || this.dead) {
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount, false) || this.dead) {
                     return true;
                 }
                 // CraftBukkit end
-                this.b(damagesource.getEntity(), false);
+                this.b(source.getEntity(), false);
                 this.a(SoundEffects.du, 1.0F, 1.0F);
                 this.setItem(ItemStack.a);
             }
 
             return true;
         } else {
-            return super.damageEntity(damagesource, f);
+            return super.hurt(source, amount);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLargeFireball.java b/src/main/java/net/minecraft/server/EntityLargeFireball.java
index b9221689c..5af74eb34 100644
--- a/src/main/java/net/minecraft/server/EntityLargeFireball.java
+++ b/src/main/java/net/minecraft/server/EntityLargeFireball.java
@@ -19,7 +19,7 @@ public class EntityLargeFireball extends EntityFireball {
     protected void a(MovingObjectPosition movingobjectposition) {
         if (!this.world.isClientSide) {
             if (movingobjectposition.entity != null) {
-                movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 6.0F);
+                movingobjectposition.entity.hurt(DamageSource.fireball(this, this.shooter), 6.0F);
                 this.a(this.shooter, movingobjectposition.entity);
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
index acb3408d5..4ae1fdecb 100644
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import java.util.List;
 
+import net.minecraft.world.Difficulty;
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
 public class EntityLightning extends EntityWeather {
@@ -23,7 +24,7 @@ public class EntityLightning extends EntityWeather {
         this.d = flag;
         BlockPosition blockposition = new BlockPosition(this);
 
-        if (!flag && !world.isClientSide && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) {
+        if (!flag && !world.isClientSide && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == Difficulty.NORMAL || world.getDifficulty() == Difficulty.HARD) && world.areChunksLoaded(blockposition, 10)) {
             if (world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition)) {
                 // CraftBukkit start
                 if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 82c3a84ed..350e562f6 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -11,6 +11,8 @@ import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.item.ItemArmor;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -32,7 +34,6 @@ import org.bukkit.event.entity.EntityTeleportEvent;
 import org.bukkit.event.player.PlayerItemConsumeEvent;
 // CraftBukkit end
 
-import co.aikar.timings.MinecraftTimings; // Paper
 
 public abstract class EntityLiving extends Entity {
 
@@ -133,7 +134,7 @@ public abstract class EntityLiving extends Entity {
     // Spigot end
 
     public void killEntity() {
-        this.damageEntity(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
+        this.hurt(DamageSource.OUT_OF_WORLD, Float.MAX_VALUE);
     }
 
     public EntityLiving(World world) {
@@ -210,7 +211,7 @@ public abstract class EntityLiving extends Entity {
 
         if (this.isAlive()) {
             if (this.inBlock()) {
-                this.damageEntity(DamageSource.STUCK, 1.0F);
+                this.hurt(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
                 double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
 
@@ -218,7 +219,7 @@ public abstract class EntityLiving extends Entity {
                     double d1 = this.world.getWorldBorder().getDamageAmount();
 
                     if (d1 > 0.0D) {
-                        this.damageEntity(DamageSource.STUCK, (float) Math.max(1, MathHelper.floor(-d0 * d1)));
+                        this.hurt(DamageSource.STUCK, (float) Math.max(1, MathHelper.floor(-d0 * d1)));
                     }
                 }
             }
@@ -245,7 +246,7 @@ public abstract class EntityLiving extends Entity {
                             this.world.addParticle(EnumParticle.WATER_BUBBLE, this.locX + (double) f, this.locY + (double) f1, this.locZ + (double) f2, this.motX, this.motY, this.motZ, new int[0]);
                         }
 
-                        this.damageEntity(DamageSource.DROWN, 2.0F);
+                        this.hurt(DamageSource.DROWN, 2.0F);
                     }
                 }
 
@@ -432,7 +433,7 @@ public abstract class EntityLiving extends Entity {
             SoundEffect soundeffect = SoundEffects.q;
             Item item = itemstack.getItem();
 
-            if (item instanceof ItemArmor) {
+            if (item instanceof net.minecraft.world.item.ItemArmor) {
                 soundeffect = ((ItemArmor) item).d().b();
             } else if (item == Items.cS) {
                 soundeffect = SoundEffects.p;
@@ -536,7 +537,7 @@ public abstract class EntityLiving extends Entity {
         this.hurtTimestamp = nbttagcompound.getInt("HurtByTimestamp");
         if (nbttagcompound.hasKeyOfType("Team", 8)) {
             String s = nbttagcompound.getString("Team");
-            boolean flag = this.world.getScoreboard().addPlayerToTeam(this.bn(), s);
+            boolean flag = this.world.getScoreboard().addPlayerToTeam(this.getStringUUID(), s);
 
             if (!flag) {
                 EntityLiving.a.warn("Unable to add mob to team \"" + s + "\" (that team probably doesn\'t exist)");
@@ -830,8 +831,8 @@ public abstract class EntityLiving extends Entity {
         this.datawatcher.set(EntityLiving.HEALTH, Float.valueOf(MathHelper.a(f, 0.0F, this.getMaxHealth())));
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else if (this.world.isClientSide) {
             return false;
@@ -839,25 +840,25 @@ public abstract class EntityLiving extends Entity {
             this.ticksFarFromPlayer = 0;
             if (this.getHealth() <= 0.0F) {
                 return false;
-            } else if (damagesource.o() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
+            } else if (source.o() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
                 return false;
             } else {
-                float f1 = f;
+                float f1 = amount;
 
                 // CraftBukkit - Moved into damageEntity0(DamageSource, float)
-                if (false && (damagesource == DamageSource.ANVIL || damagesource == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
-                    this.getEquipment(EnumItemSlot.HEAD).damage((int) (f * 4.0F + this.random.nextFloat() * f * 2.0F), this);
-                    f *= 0.75F;
+                if (false && (source == DamageSource.ANVIL || source == DamageSource.FALLING_BLOCK) && !this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
+                    this.getEquipment(EnumItemSlot.HEAD).damage((int) (amount * 4.0F + this.random.nextFloat() * amount * 2.0F), this);
+                    amount *= 0.75F;
                 }
 
-                boolean flag = f > 0.0F && this.applyBlockingModifier(damagesource); // Copied from below
+                boolean flag = amount > 0.0F && this.applyBlockingModifier(source); // Copied from below
 
                 // CraftBukkit - Moved into damageEntity0(DamageSource, float)
-                if (false && f > 0.0F && this.applyBlockingModifier(damagesource)) {
-                    this.damageShield(f);
-                    f = 0.0F;
-                    if (!damagesource.a()) {
-                        Entity entity = damagesource.i();
+                if (false && amount > 0.0F && this.applyBlockingModifier(source)) {
+                    this.damageShield(amount);
+                    amount = 0.0F;
+                    if (!source.a()) {
+                        Entity entity = source.i();
 
                         if (entity instanceof EntityLiving) {
                             this.c((EntityLiving) entity);
@@ -871,24 +872,24 @@ public abstract class EntityLiving extends Entity {
                 boolean flag1 = true;
 
                 if ((float) this.noDamageTicks > (float) this.maxNoDamageTicks / 2.0F) {
-                    if (f <= this.lastDamage) {
+                    if (amount <= this.lastDamage) {
                         this.forceExplosionKnockback = true; // CraftBukkit - SPIGOT-949 - for vanilla consistency, cooldown does not prevent explosion knockback
                         return false;
                     }
 
                     // CraftBukkit start
-                    if (!this.damageEntity0(damagesource, f - this.lastDamage)) {
+                    if (!this.damageEntity0(source, amount - this.lastDamage)) {
                         return false;
                     }
                     // CraftBukkit end
-                    this.lastDamage = f;
+                    this.lastDamage = amount;
                     flag1 = false;
                 } else {
                     // CraftBukkit start
-                    if (!this.damageEntity0(damagesource, f)) {
+                    if (!this.damageEntity0(source, amount)) {
                         return false;
                     }
-                    this.lastDamage = f;
+                    this.lastDamage = amount;
                     this.noDamageTicks = this.maxNoDamageTicks;
                     // this.damageEntity0(damagesource, f);
                     // CraftBukkit end
@@ -906,7 +907,7 @@ public abstract class EntityLiving extends Entity {
                 // CraftBukkit end
 
                 this.aA = 0.0F;
-                Entity entity1 = damagesource.getEntity();
+                Entity entity1 = source.getEntity();
 
                 if (entity1 != null) {
                     if (entity1 instanceof EntityLiving) {
@@ -926,18 +927,18 @@ public abstract class EntityLiving extends Entity {
                     }
                 }
 
-                boolean knockbackCancelled = world.paperConfig.disableExplosionKnockback && damagesource.isExplosion() && this instanceof EntityHuman; // Paper - Disable explosion knockback
+                boolean knockbackCancelled = world.paperConfig.disableExplosionKnockback && source.isExplosion() && this instanceof EntityHuman; // Paper - Disable explosion knockback
                 if (flag1) {
                     if (flag) {
                         this.world.broadcastEntityEffect(this, (byte) 29);
-                    } else if (damagesource instanceof EntityDamageSource && ((EntityDamageSource) damagesource).x()) {
+                    } else if (source instanceof EntityDamageSource && ((EntityDamageSource) source).x()) {
                         this.world.broadcastEntityEffect(this, (byte) 33);
                     } else {
                         byte b0;
 
-                        if (damagesource == DamageSource.DROWN) {
+                        if (source == DamageSource.DROWN) {
                             b0 = 36;
-                        } else if (damagesource.o()) {
+                        } else if (source.o()) {
                             b0 = 37;
                         } else {
                             b0 = 2;
@@ -947,7 +948,7 @@ public abstract class EntityLiving extends Entity {
                         this.world.broadcastEntityEffect(this, b0);
                     }
 
-                    if (damagesource != DamageSource.DROWN && (!flag || f > 0.0F)) {
+                    if (source != DamageSource.DROWN && (!flag || amount > 0.0F)) {
                         this.ax();
                     }
 
@@ -970,7 +971,7 @@ public abstract class EntityLiving extends Entity {
                 if (knockbackCancelled) this.world.broadcastEntityEffect(this, (byte) 2); // Paper - Disable explosion knockback
 
                 if (this.getHealth() <= 0.0F) {
-                    if (!this.e(damagesource)) {
+                    if (!this.e(source)) {
                         // Paper start - moved into CraftEventFactory event caller for cancellable death event
                         //SoundEffect soundeffect = this.cf();
 
@@ -980,26 +981,26 @@ public abstract class EntityLiving extends Entity {
                         this.silentDeath = !flag1; // mark entity as dying silently
                         // Paper end
 
-                        this.die(damagesource);
+                        this.die(source);
                         this.silentDeath = false; // Paper - cancellable death event - reset to default
                     }
                 } else if (flag1) {
-                    this.c(damagesource);
+                    this.c(source);
                 }
 
-                boolean flag2 = !flag || f > 0.0F;
+                boolean flag2 = !flag || amount > 0.0F;
 
                 if (flag2) {
-                    this.bG = damagesource;
+                    this.bG = source;
                     this.bH = this.world.getTime();
                 }
 
                 if (this instanceof EntityPlayer) {
-                    CriterionTriggers.h.a((EntityPlayer) this, damagesource, f1, f, flag);
+                    CriterionTriggers.h.a((EntityPlayer) this, source, f1, amount, flag);
                 }
 
                 if (entity1 instanceof EntityPlayer) {
-                    CriterionTriggers.g.a((EntityPlayer) entity1, this, damagesource, f1, f, flag);
+                    CriterionTriggers.g.a((EntityPlayer) entity1, this, source, f1, amount, flag);
                 }
 
                 return flag2;
@@ -1277,7 +1278,7 @@ public abstract class EntityLiving extends Entity {
 
         if (i > 0) {
             // CraftBukkit start
-            if (!this.damageEntity(DamageSource.FALL, (float) i)) {
+            if (!this.hurt(DamageSource.FALL, (float) i)) {
                 return;
             }
             // CraftBukkit end
@@ -1346,7 +1347,7 @@ public abstract class EntityLiving extends Entity {
 
     // CraftBukkit start
     protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
-       if (!this.isInvulnerable(damagesource)) {
+       if (!this.isInvulnerableTo(damagesource)) {
             final boolean human = this instanceof EntityHuman;
             float originalDamage = f;
             Function<Double, Double> hardHat = new Function<Double, Double>() {
@@ -1520,7 +1521,7 @@ public abstract class EntityLiving extends Entity {
     }
 
     protected void ac() {
-        this.damageEntity(DamageSource.OUT_OF_WORLD, 4.0F);
+        this.hurt(DamageSource.OUT_OF_WORLD, 4.0F);
     }
 
     protected void cl() {
@@ -1837,7 +1838,7 @@ public abstract class EntityLiving extends Entity {
 
                     if (f8 > 0.0F) {
                         this.a(this.e((int) f8), 1.0F, 1.0F);
-                        this.damageEntity(DamageSource.FLY_INTO_WALL, f8);
+                        this.hurt(DamageSource.FLY_INTO_WALL, f8);
                     }
                 }
                 } // Paper end - Elyta Wall Damage if statement
@@ -2244,7 +2245,7 @@ public abstract class EntityLiving extends Entity {
                 }
 
                 if (j > i - 1) {
-                    this.damageEntity(DamageSource.CRAMMING, 6.0F);
+                    this.hurt(DamageSource.CRAMMING, 6.0F);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
index af49b7273..2ad558bc0 100644
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -322,14 +322,14 @@ public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEn
 
         if (i > 0) {
             if (f >= 6.0F) {
-                this.damageEntity(DamageSource.FALL, (float) i);
+                this.hurt(DamageSource.FALL, (float) i);
                 if (this.isVehicle()) {
                     Iterator iterator = this.bG().iterator();
 
                     while (iterator.hasNext()) {
                         Entity entity = (Entity) iterator.next();
 
-                        entity.damageEntity(DamageSource.FALL, (float) i);
+                        entity.hurt(DamageSource.FALL, (float) i);
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityLlamaSpit.java b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
index 11efc789d..8c9543c31 100644
--- a/src/main/java/net/minecraft/server/EntityLlamaSpit.java
+++ b/src/main/java/net/minecraft/server/EntityLlamaSpit.java
@@ -145,7 +145,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
     public void a(MovingObjectPosition movingobjectposition) {
         org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition); // Craftbukkit - Call event
         if (movingobjectposition.entity != null && this.shooter != null) {
-            movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 1.0F);
+            movingobjectposition.entity.hurt(DamageSource.a(this, this.shooter).b(), 1.0F);
         }
 
         if (!this.world.isClientSide) {
@@ -166,7 +166,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
     protected void b(NBTTagCompound nbttagcompound) {
         if (this.shooter != null) {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
-            UUID uuid = this.shooter.getUniqueID();
+            UUID uuid = this.shooter.getUUID();
 
             nbttagcompound1.a("OwnerUUID", uuid);
             nbttagcompound.set("Owner", nbttagcompound1);
@@ -183,7 +183,7 @@ public class EntityLlamaSpit extends Entity implements IProjectile {
             while (iterator.hasNext()) {
                 EntityLlama entityllama = (EntityLlama) iterator.next();
 
-                if (entityllama.getUniqueID().equals(uuid)) {
+                if (entityllama.getUUID().equals(uuid)) {
                     this.shooter = entityllama;
                     break;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 1f4025486..6e4cf773a 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -116,29 +116,29 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         return 0.0D;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         if (!this.world.isClientSide && !this.dead) {
-            if (this.isInvulnerable(damagesource)) {
+            if (this.isInvulnerableTo(source)) {
                 return false;
             } else {
                 // CraftBukkit start - fire VehicleDamageEvent
                 Vehicle vehicle = (Vehicle) this.getBukkitEntity();
-                org.bukkit.entity.Entity passenger = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
 
-                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, f);
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, amount);
                 this.world.getServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return true;
                 }
 
-                f = (float) event.getDamage();
+                amount = (float) event.getDamage();
                 // CraftBukkit end
                 this.e(-this.u());
                 this.d(10);
                 this.ax();
-                this.setDamage(this.getDamage() + f * 10.0F);
-                boolean flag = damagesource.getEntity() instanceof EntityHuman && ((EntityHuman) damagesource.getEntity()).abilities.canInstantlyBuild;
+                this.setDamage(this.getDamage() + amount * 10.0F);
+                boolean flag = source.getEntity() instanceof EntityHuman && ((EntityHuman) source.getEntity()).abilities.canInstantlyBuild;
 
                 if (flag || this.getDamage() > 40.0F) {
                     // CraftBukkit start
@@ -154,7 +154,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
                     if (flag && !this.hasCustomName()) {
                         this.die();
                     } else {
-                        this.a(damagesource);
+                        this.a(source);
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/server/EntityMonster.java b/src/main/java/net/minecraft/server/EntityMonster.java
index 8782bce56..e86eff193 100644
--- a/src/main/java/net/minecraft/server/EntityMonster.java
+++ b/src/main/java/net/minecraft/server/EntityMonster.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
 import org.bukkit.event.entity.EntityCombustByEntityEvent; // CraftBukkit
 
 public abstract class EntityMonster extends EntityCreature implements IMonster {
@@ -26,7 +27,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
 
     public void B_() {
         super.B_();
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (!this.world.isClientSide && this.world.getDifficulty() == Difficulty.PEACEFUL) {
             this.die();
         }
 
@@ -40,8 +41,8 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
         return SoundEffects.cW;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        return this.isInvulnerable(damagesource) ? false : super.damageEntity(damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        return this.isInvulnerableTo(source) ? false : super.hurt(source, amount);
     }
 
     protected SoundEffect d(DamageSource damagesource) {
@@ -65,7 +66,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
             i += EnchantmentManager.b((EntityLiving) this);
         }
 
-        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), f);
+        boolean flag = entity.hurt(DamageSource.mobAttack(this), f);
 
         if (flag) {
             if (i > 0 && entity instanceof EntityLiving) {
@@ -133,7 +134,7 @@ public abstract class EntityMonster extends EntityCreature implements IMonster {
     }
 
     public boolean P() {
-        return this.world.getDifficulty() != EnumDifficulty.PEACEFUL && this.s_() && super.P();
+        return this.world.getDifficulty() != Difficulty.PEACEFUL && this.s_() && super.P();
     }
 
     protected void initAttributes() {
diff --git a/src/main/java/net/minecraft/server/EntityOcelot.java b/src/main/java/net/minecraft/server/EntityOcelot.java
index 858bbef5b..5e08cd8ce 100644
--- a/src/main/java/net/minecraft/server/EntityOcelot.java
+++ b/src/main/java/net/minecraft/server/EntityOcelot.java
@@ -101,11 +101,11 @@ public class EntityOcelot extends EntityTameableAnimal {
     }
 
     public boolean B(Entity entity) {
-        return entity.damageEntity(DamageSource.mobAttack(this), 3.0F);
+        return entity.hurt(DamageSource.mobAttack(this), 3.0F);
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+        if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else {
             if (this.goalSit != null) {
@@ -113,7 +113,7 @@ public class EntityOcelot extends EntityTameableAnimal {
                 // this.goalSit.setSitting(false);
             }
 
-            return super.damageEntity(damagesource, f);
+            return super.hurt(damagesource, f);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index f31d9b31b..a2d0056b4 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -157,8 +157,8 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
             }
 
             this.addEffect(new MobEffect(MobEffects.POISON, 900));
-            if (entityhuman.z() || !this.be()) {
-                this.damageEntity(DamageSource.playerAttack(entityhuman), Float.MAX_VALUE);
+            if (entityhuman.z() || !this.isInvulnerable()) {
+                this.hurt(DamageSource.playerAttack(entityhuman), Float.MAX_VALUE);
             }
 
             return true;
@@ -206,7 +206,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public boolean B(Entity entity) {
-        return entity.damageEntity(DamageSource.mobAttack(this), 3.0F);
+        return entity.hurt(DamageSource.mobAttack(this), 3.0F);
     }
 
     @Nullable
@@ -272,7 +272,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+        if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else {
             if (this.goalSit != null) {
@@ -280,7 +280,7 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
                 // this.goalSit.setSitting(false);
             }
 
-            return super.damageEntity(damagesource, f);
+            return super.hurt(damagesource, f);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index cb2c459ae..c4f4f7427 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -206,7 +206,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             NBTTagCompound nbttagcompound3 = new NBTTagCompound();
 
             entity.d(nbttagcompound3);
-            nbttagcompound2.a("Attach", entity1.getUniqueID());
+            nbttagcompound2.a("Attach", entity1.getUUID());
             nbttagcompound2.set("Entity", nbttagcompound3);
             nbttagcompound.set("RootVehicle", nbttagcompound2);
         }
@@ -565,7 +565,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     }
 
     private Collection<ScoreboardScore> E(Entity entity) { // CraftBukkit
-        String s = entity instanceof EntityHuman ? entity.getName() : entity.bn();
+        String s = entity instanceof EntityHuman ? entity.getName() : entity.getStringUUID();
         ScoreboardTeam scoreboardteam = this.getScoreboard().getPlayerTeam(this.getName());
 
         if (scoreboardteam != null) {
@@ -599,17 +599,17 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         return Lists.newArrayList();
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
-            boolean flag = this.server.aa() && this.canPvP() && "fall".equals(damagesource.translationIndex);
+            boolean flag = this.server.aa() && this.canPvP() && "fall".equals(source.translationIndex);
 
-            if (!flag && this.invulnerableTicks > 0 && damagesource != DamageSource.OUT_OF_WORLD) {
+            if (!flag && this.invulnerableTicks > 0 && source != DamageSource.OUT_OF_WORLD) {
                 return false;
             } else {
-                if (damagesource instanceof EntityDamageSource) {
-                    Entity entity = damagesource.getEntity();
+                if (source instanceof EntityDamageSource) {
+                    Entity entity = source.getEntity();
 
                     if (entity instanceof EntityHuman && !this.a((EntityHuman) entity)) {
                         return false;
@@ -626,7 +626,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 // Paper start - cancellable death events
                 //return super.damageEntity(damagesource, f);
                 this.queueHealthUpdatePacket = true;
-                boolean damaged = super.damageEntity(damagesource, f);
+                boolean damaged = super.hurt(source, amount);
                 this.queueHealthUpdatePacket = false;
                 if (this.queuedHealthUpdatePacket != null) {
                     this.playerConnection.sendPacket(this.queuedHealthUpdatePacket);
@@ -769,8 +769,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
     }
 
-    public boolean isInvulnerable(DamageSource damagesource) {
-        return super.isInvulnerable(damagesource) || this.L();
+    public boolean isInvulnerableTo(DamageSource damageSource) {
+        return super.isInvulnerableTo(damageSource) || this.L();
     }
 
     protected void a(double d0, boolean flag, IBlockData iblockdata, BlockPosition blockposition) {}
diff --git a/src/main/java/net/minecraft/server/EntityPotion.java b/src/main/java/net/minecraft/server/EntityPotion.java
index 80d09488e..70447abfd 100644
--- a/src/main/java/net/minecraft/server/EntityPotion.java
+++ b/src/main/java/net/minecraft/server/EntityPotion.java
@@ -120,7 +120,7 @@ public class EntityPotion extends EntityProjectile {
                 double d0 = this.h(entityliving);
 
                 if (d0 < 16.0D && c(entityliving)) {
-                    entityliving.damageEntity(DamageSource.DROWN, 1.0F);
+                    entityliving.hurt(DamageSource.DROWN, 1.0F);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityRabbit.java b/src/main/java/net/minecraft/server/EntityRabbit.java
index fb56a2901..74a010d6f 100644
--- a/src/main/java/net/minecraft/server/EntityRabbit.java
+++ b/src/main/java/net/minecraft/server/EntityRabbit.java
@@ -232,9 +232,9 @@ public class EntityRabbit extends EntityAnimal {
     public boolean B(Entity entity) {
         if (this.getRabbitType() == 99) {
             this.a(SoundEffects.fW, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-            return entity.damageEntity(DamageSource.mobAttack(this), 8.0F);
+            return entity.hurt(DamageSource.mobAttack(this), 8.0F);
         } else {
-            return entity.damageEntity(DamageSource.mobAttack(this), 3.0F);
+            return entity.hurt(DamageSource.mobAttack(this), 3.0F);
         }
     }
 
@@ -242,8 +242,8 @@ public class EntityRabbit extends EntityAnimal {
         return this.getRabbitType() == 99 ? SoundCategory.HOSTILE : SoundCategory.NEUTRAL;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        return this.isInvulnerable(damagesource) ? false : super.damageEntity(damagesource, f);
+    public boolean hurt(DamageSource source, float amount) {
+        return this.isInvulnerableTo(source) ? false : super.hurt(source, amount);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/EntityShulker.java b/src/main/java/net/minecraft/server/EntityShulker.java
index 0887c2407..ca224c816 100644
--- a/src/main/java/net/minecraft/server/EntityShulker.java
+++ b/src/main/java/net/minecraft/server/EntityShulker.java
@@ -7,6 +7,7 @@ import java.util.List;
 import java.util.UUID;
 import javax.annotation.Nullable;
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.Location;
 import org.bukkit.event.entity.EntityTeleportEvent;
 // CraftBukkit end
@@ -412,7 +413,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
             }
         }
 
-        if (super.damageEntity(damagesource, f)) {
+        if (super.hurt(damagesource, f)) {
             if ((double) this.getHealth() < (double) this.getMaxHealth() * 0.5D && this.random.nextInt(4) == 0) {
                 this.p();
             }
@@ -518,7 +519,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         public boolean a() {
-            return EntityShulker.this.world.getDifficulty() == EnumDifficulty.PEACEFUL ? false : super.a();
+            return EntityShulker.this.world.getDifficulty() == Difficulty.PEACEFUL ? false : super.a();
         }
 
         protected AxisAlignedBB a(double d0) {
@@ -539,7 +540,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         public boolean a() {
             EntityLiving entityliving = EntityShulker.this.getGoalTarget();
 
-            return entityliving != null && entityliving.isAlive() ? EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL : false;
+            return entityliving != null && entityliving.isAlive() ? EntityShulker.this.world.getDifficulty() != Difficulty.PEACEFUL : false;
         }
 
         public void c() {
@@ -552,7 +553,7 @@ public class EntityShulker extends EntityGolem implements IMonster {
         }
 
         public void e() {
-            if (EntityShulker.this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
+            if (EntityShulker.this.world.getDifficulty() != Difficulty.PEACEFUL) {
                 --this.b;
                 EntityLiving entityliving = EntityShulker.this.getGoalTarget();
 
diff --git a/src/main/java/net/minecraft/server/EntityShulkerBullet.java b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
index f019729e9..c6287b214 100644
--- a/src/main/java/net/minecraft/server/EntityShulkerBullet.java
+++ b/src/main/java/net/minecraft/server/EntityShulkerBullet.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.minecraft.world.Difficulty;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -75,7 +77,7 @@ public class EntityShulkerBullet extends Entity {
 
         if (this.shooter != null) {
             blockposition = new BlockPosition(this.shooter);
-            nbttagcompound1 = GameProfileSerializer.a(this.shooter.getUniqueID());
+            nbttagcompound1 = GameProfileSerializer.a(this.shooter.getUUID());
             nbttagcompound1.setInt("X", blockposition.getX());
             nbttagcompound1.setInt("Y", blockposition.getY());
             nbttagcompound1.setInt("Z", blockposition.getZ());
@@ -84,7 +86,7 @@ public class EntityShulkerBullet extends Entity {
 
         if (this.target != null) {
             blockposition = new BlockPosition(this.target);
-            nbttagcompound1 = GameProfileSerializer.a(this.target.getUniqueID());
+            nbttagcompound1 = GameProfileSerializer.a(this.target.getUUID());
             nbttagcompound1.setInt("X", blockposition.getX());
             nbttagcompound1.setInt("Y", blockposition.getY());
             nbttagcompound1.setInt("Z", blockposition.getZ());
@@ -211,7 +213,7 @@ public class EntityShulkerBullet extends Entity {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL) {
+        if (!this.world.isClientSide && this.world.getDifficulty() == Difficulty.PEACEFUL) {
             this.die();
         } else {
             super.B_();
@@ -226,7 +228,7 @@ public class EntityShulkerBullet extends Entity {
 
                     while (iterator.hasNext()) {
                         entityliving = (EntityLiving) iterator.next();
-                        if (entityliving.getUniqueID().equals(this.au)) {
+                        if (entityliving.getUUID().equals(this.au)) {
                             this.target = entityliving;
                             break;
                         }
@@ -241,7 +243,7 @@ public class EntityShulkerBullet extends Entity {
 
                     while (iterator.hasNext()) {
                         entityliving = (EntityLiving) iterator.next();
-                        if (entityliving.getUniqueID().equals(this.h)) {
+                        if (entityliving.getUUID().equals(this.h)) {
                             this.shooter = entityliving;
                             break;
                         }
@@ -313,7 +315,7 @@ public class EntityShulkerBullet extends Entity {
             ((WorldServer) this.world).a(EnumParticle.EXPLOSION_LARGE, this.locX, this.locY, this.locZ, 2, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
             this.a(SoundEffects.gD, 1.0F, 1.0F);
         } else {
-            boolean flag = movingobjectposition.entity.damageEntity(DamageSource.a(this, this.shooter).b(), 4.0F);
+            boolean flag = movingobjectposition.entity.hurt(DamageSource.a(this, this.shooter).b(), 4.0F);
 
             if (flag) {
                 this.a(this.shooter, movingobjectposition.entity);
@@ -330,7 +332,7 @@ public class EntityShulkerBullet extends Entity {
         return true;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         if (!this.world.isClientSide) {
             this.a(SoundEffects.gE, 1.0F, 1.0F);
             ((WorldServer) this.world).a(EnumParticle.CRIT, this.locX, this.locY, this.locZ, 15, 0.2D, 0.2D, 0.2D, 0.0D, new int[0]);
diff --git a/src/main/java/net/minecraft/server/EntitySilverfish.java b/src/main/java/net/minecraft/server/EntitySilverfish.java
index 57552c522..067e318fb 100644
--- a/src/main/java/net/minecraft/server/EntitySilverfish.java
+++ b/src/main/java/net/minecraft/server/EntitySilverfish.java
@@ -61,15 +61,15 @@ public class EntitySilverfish extends EntityMonster {
         this.a(SoundEffects.gP, 0.15F, 1.0F);
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
         } else {
-            if ((damagesource instanceof EntityDamageSource || damagesource == DamageSource.MAGIC) && this.a != null) {
+            if ((source instanceof EntityDamageSource || source == DamageSource.MAGIC) && this.a != null) {
                 this.a.f();
             }
 
-            return super.damageEntity(damagesource, f);
+            return super.hurt(source, amount);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
index 8f4b63c8d..44a4b3800 100644
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import java.util.Calendar;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.Difficulty;
 import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
 
 public abstract class EntitySkeletonAbstract extends EntityMonster implements IRangedEntity {
@@ -139,7 +141,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
             if (itemstack.getItem() == Items.BOW) {
                 byte b0 = 20;
 
-                if (this.world.getDifficulty() != EnumDifficulty.HARD) {
+                if (this.world.getDifficulty() != Difficulty.HARD) {
                     b0 = 40;
                 }
 
@@ -159,7 +161,7 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
         double d2 = entityliving.locZ - this.locZ;
         double d3 = (double) MathHelper.sqrt(d0 * d0 + d2 * d2);
 
-        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().a() * 4));
+        entityarrow.shoot(d0, d1 + d3 * 0.20000000298023224D, d2, 1.6F, (float) (14 - this.world.getDifficulty().getId() * 4));
         // CraftBukkit start
         org.bukkit.event.entity.EntityShootBowEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityShootBowEvent(this, this.getItemInMainHand(), this.getItemInOffHand(), entityarrow, 0.8F); // Paper
         if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index 3d3a9ca04..6030e5f77 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import javax.annotation.Nullable;
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.event.entity.SlimeSplitEvent;
 // CraftBukkit end
 
@@ -80,7 +81,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     }
 
     public void B_() {
-        if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
+        if (!this.world.isClientSide && this.world.getDifficulty() == Difficulty.PEACEFUL && this.getSize() > 0) {
             this.dead = true;
         }
 
@@ -198,7 +199,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
     protected void e(EntityLiving entityliving) {
         int i = this.getSize();
 
-        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.di())) {
+        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.hurt(DamageSource.mobAttack(this), (float) this.di())) {
             this.a(SoundEffects.gY, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.a((EntityLiving) this, (Entity) entityliving);
         }
@@ -245,7 +246,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
         if (this.world.getWorldData().getType() == WorldType.FLAT && this.random.nextInt(4) != 1) {
             return false;
         } else {
-            if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
+            if (this.world.getDifficulty() != Difficulty.PEACEFUL) {
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
                 if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.G() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
diff --git a/src/main/java/net/minecraft/server/EntitySmallFireball.java b/src/main/java/net/minecraft/server/EntitySmallFireball.java
index 3f5fe4e1d..03a0cd8aa 100644
--- a/src/main/java/net/minecraft/server/EntitySmallFireball.java
+++ b/src/main/java/net/minecraft/server/EntitySmallFireball.java
@@ -35,7 +35,7 @@ public class EntitySmallFireball extends EntityFireball {
             if (movingobjectposition.entity != null) {
                 if (!movingobjectposition.entity.isFireProof()) {
                     // CraftBukkit start - Entity damage by entity event + combust event
-                    isIncendiary = movingobjectposition.entity.damageEntity(DamageSource.fireball(this, this.shooter), 5.0F);
+                    isIncendiary = movingobjectposition.entity.hurt(DamageSource.fireball(this, this.shooter), 5.0F);
                     if (isIncendiary) {
                         this.a(this.shooter, movingobjectposition.entity);
                         EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), movingobjectposition.entity.getBukkitEntity(), 5);
@@ -75,7 +75,7 @@ public class EntitySmallFireball extends EntityFireball {
         return false;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntitySnowman.java b/src/main/java/net/minecraft/server/EntitySnowman.java
index f8a2273c2..cd2be178f 100644
--- a/src/main/java/net/minecraft/server/EntitySnowman.java
+++ b/src/main/java/net/minecraft/server/EntitySnowman.java
@@ -59,11 +59,11 @@ public class EntitySnowman extends EntityGolem implements IRangedEntity {
             int k = MathHelper.floor(this.locZ);
 
             if (this.an()) {
-                this.damageEntity(DamageSource.DROWN, 1.0F);
+                this.hurt(DamageSource.DROWN, 1.0F);
             }
 
             if (this.world.getBiome(new BlockPosition(i, 0, k)).a(new BlockPosition(i, j, k)) > 1.0F) {
-                this.damageEntity(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
+                this.hurt(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
             }
 
             if (!this.world.getGameRules().getBoolean("mobGriefing")) {
diff --git a/src/main/java/net/minecraft/server/EntitySpider.java b/src/main/java/net/minecraft/server/EntitySpider.java
index 957fa5779..d2e5a15e0 100644
--- a/src/main/java/net/minecraft/server/EntitySpider.java
+++ b/src/main/java/net/minecraft/server/EntitySpider.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
+
 import java.util.Random;
 import javax.annotation.Nullable;
 
@@ -121,7 +123,7 @@ public class EntitySpider extends EntityMonster {
 
         if (object == null) {
             object = new EntitySpider.GroupDataSpider();
-            if (this.world.getDifficulty() == EnumDifficulty.HARD && this.world.random.nextFloat() < 0.1F * difficultydamagescaler.d()) {
+            if (this.world.getDifficulty() == Difficulty.HARD && this.world.random.nextFloat() < 0.1F * difficultydamagescaler.d()) {
                 ((EntitySpider.GroupDataSpider) object).a(this.world.random);
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index a60f94608..07ddf5b8f 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -5,6 +5,8 @@ import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Set;
+
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index efc4c79ab..7b6cbb106 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,11 +1,12 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
+
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index 2359b31f4..06dee13ba 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -8,6 +8,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
diff --git a/src/main/java/net/minecraft/server/EntityVex.java b/src/main/java/net/minecraft/server/EntityVex.java
index 673c3ff3c..3bf42e5bc 100644
--- a/src/main/java/net/minecraft/server/EntityVex.java
+++ b/src/main/java/net/minecraft/server/EntityVex.java
@@ -32,7 +32,7 @@ public class EntityVex extends EntityMonster {
         this.setNoGravity(true);
         if (this.bx && --this.by <= 0) {
             this.by = 20;
-            this.damageEntity(DamageSource.STARVE, 1.0F);
+            this.hurt(DamageSource.STARVE, 1.0F);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index a9c4ab10d..114f51b25 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -527,7 +527,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
             ChatComponentText chatcomponenttext = new ChatComponentText(ScoreboardTeam.getPlayerDisplayName(scoreboardteambase, s));
 
             chatcomponenttext.getChatModifier().setChatHoverable(this.bv());
-            chatcomponenttext.getChatModifier().setInsertion(this.bn());
+            chatcomponenttext.getChatModifier().setInsertion(this.getStringUUID());
             return chatcomponenttext;
         } else {
             if (this.trades == null) {
@@ -587,7 +587,7 @@ public class EntityVillager extends EntityAgeable implements NPC, IMerchant {
                 ChatMessage chatmessage = new ChatMessage("entity.Villager." + s1, new Object[0]);
 
                 chatmessage.getChatModifier().setChatHoverable(this.bv());
-                chatmessage.getChatModifier().setInsertion(this.bn());
+                chatmessage.getChatModifier().setInsertion(this.getStringUUID());
                 if (scoreboardteambase != null) {
                     chatmessage.getChatModifier().setColor(scoreboardteambase.getColor());
                 }
diff --git a/src/main/java/net/minecraft/server/EntityWaterAnimal.java b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
index 0597edad6..8c689cc73 100644
--- a/src/main/java/net/minecraft/server/EntityWaterAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityWaterAnimal.java
@@ -47,7 +47,7 @@ public abstract class EntityWaterAnimal extends EntityInsentient implements IAni
             this.setAirTicks(i);
             if (this.getAirTicks() == -20) {
                 this.setAirTicks(0);
-                this.damageEntity(DamageSource.DROWN, 2.0F);
+                this.hurt(DamageSource.DROWN, 2.0F);
             }
         } else {
             this.setAirTicks(300);
diff --git a/src/main/java/net/minecraft/server/EntityWither.java b/src/main/java/net/minecraft/server/EntityWither.java
index 967852605..842dd9e6f 100644
--- a/src/main/java/net/minecraft/server/EntityWither.java
+++ b/src/main/java/net/minecraft/server/EntityWither.java
@@ -6,6 +6,7 @@ import java.util.List;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.entity.EntityRegainHealthEvent;
 import org.bukkit.event.entity.ExplosionPrimeEvent;
@@ -245,7 +246,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
             for (i = 1; i < 3; ++i) {
                 if (this.ticksLived >= this.bD[i - 1]) {
                     this.bD[i - 1] = this.ticksLived + 10 + this.random.nextInt(10);
-                    if (this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD) {
+                    if (this.world.getDifficulty() == Difficulty.NORMAL || this.world.getDifficulty() == Difficulty.HARD) {
                         int k = i - 1;
                         int l = this.bE[i - 1];
 
@@ -439,23 +440,23 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
         this.a(0, entityliving);
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (this.isInvulnerableTo(source)) {
             return false;
-        } else if (damagesource != DamageSource.DROWN && !(damagesource.getEntity() instanceof EntityWither)) {
-            if (this.dm() > 0 && damagesource != DamageSource.OUT_OF_WORLD) {
+        } else if (source != DamageSource.DROWN && !(source.getEntity() instanceof EntityWither)) {
+            if (this.dm() > 0 && source != DamageSource.OUT_OF_WORLD) {
                 return false;
             } else {
                 Entity entity;
 
                 if (this.dn()) {
-                    entity = damagesource.i();
+                    entity = source.i();
                     if (entity instanceof EntityArrow) {
                         return false;
                     }
                 }
 
-                entity = damagesource.getEntity();
+                entity = source.getEntity();
                 if (entity != null && !(entity instanceof EntityHuman) && entity instanceof EntityLiving && ((EntityLiving) entity).getMonsterType() == this.getMonsterType()) {
                     return false;
                 } else {
@@ -467,7 +468,7 @@ public class EntityWither extends EntityMonster implements IRangedEntity {
                         this.bE[i] += 3;
                     }
 
-                    return super.damageEntity(damagesource, f);
+                    return super.hurt(source, amount);
                 }
             }
         } else {
diff --git a/src/main/java/net/minecraft/server/EntityWitherSkull.java b/src/main/java/net/minecraft/server/EntityWitherSkull.java
index de9eb2d39..e415f92df 100644
--- a/src/main/java/net/minecraft/server/EntityWitherSkull.java
+++ b/src/main/java/net/minecraft/server/EntityWitherSkull.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
 import org.bukkit.event.entity.ExplosionPrimeEvent; // CraftBukkit
 
 public class EntityWitherSkull extends EntityFireball {
@@ -45,7 +46,7 @@ public class EntityWitherSkull extends EntityFireball {
                 // Spigot start
                 boolean didDamage = false;
                 if (this.shooter != null) {
-                    didDamage = movingobjectposition.entity.damageEntity(DamageSource.projectile(this, shooter), 8.0F);
+                    didDamage = movingobjectposition.entity.hurt(DamageSource.projectile(this, shooter), 8.0F);
                     if (didDamage) { // CraftBukkit
                         if (movingobjectposition.entity.isAlive()) {
                             this.a(this.shooter, movingobjectposition.entity);
@@ -54,16 +55,16 @@ public class EntityWitherSkull extends EntityFireball {
                         }
                     }
                 } else {
-                    didDamage = movingobjectposition.entity.damageEntity(DamageSource.MAGIC, 5.0F);
+                    didDamage = movingobjectposition.entity.hurt(DamageSource.MAGIC, 5.0F);
                 }
 
                 if (didDamage && movingobjectposition.entity instanceof EntityLiving) {
                 // Spigot end
                     byte b0 = 0;
 
-                    if (this.world.getDifficulty() == EnumDifficulty.NORMAL) {
+                    if (this.world.getDifficulty() == Difficulty.NORMAL) {
                         b0 = 10;
-                    } else if (this.world.getDifficulty() == EnumDifficulty.HARD) {
+                    } else if (this.world.getDifficulty() == Difficulty.HARD) {
                         b0 = 40;
                     }
 
@@ -91,7 +92,7 @@ public class EntityWitherSkull extends EntityFireball {
         return false;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
+    public boolean hurt(DamageSource source, float amount) {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityWolf.java b/src/main/java/net/minecraft/server/EntityWolf.java
index f5fd4acad..47cc5218b 100644
--- a/src/main/java/net/minecraft/server/EntityWolf.java
+++ b/src/main/java/net/minecraft/server/EntityWolf.java
@@ -215,7 +215,7 @@ public class EntityWolf extends EntityTameableAnimal {
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+        if (this.isInvulnerableTo(damagesource)) {
             return false;
         } else {
             Entity entity = damagesource.getEntity();
@@ -228,12 +228,12 @@ public class EntityWolf extends EntityTameableAnimal {
                 f = (f + 1.0F) / 2.0F;
             }
 
-            return super.damageEntity(damagesource, f);
+            return super.hurt(damagesource, f);
         }
     }
 
     public boolean B(Entity entity) {
-        boolean flag = entity.damageEntity(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
+        boolean flag = entity.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttributeInstance(GenericAttributes.ATTACK_DAMAGE).getValue()));
 
         if (flag) {
             this.a((EntityLiving) this, entity);
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
index 6111ca0b2..a85d28180 100644
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -6,6 +6,7 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 //CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityCombustEvent;
@@ -159,15 +160,15 @@ public class EntityZombie extends EntityMonster {
         return true;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (super.damageEntity(damagesource, f)) {
+    public boolean hurt(DamageSource source, float amount) {
+        if (super.hurt(source, amount)) {
             EntityLiving entityliving = this.getGoalTarget();
 
-            if (entityliving == null && damagesource.getEntity() instanceof EntityLiving) {
-                entityliving = (EntityLiving) damagesource.getEntity();
+            if (entityliving == null && source.getEntity() instanceof EntityLiving) {
+                entityliving = (EntityLiving) source.getEntity();
             }
 
-            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.random.nextFloat() < this.getAttributeInstance(EntityZombie.a).getValue() && this.world.getGameRules().getBoolean("doMobSpawning")) {
+            if (entityliving != null && this.world.getDifficulty() == Difficulty.HARD && (double) this.random.nextFloat() < this.getAttributeInstance(EntityZombie.a).getValue() && this.world.getGameRules().getBoolean("doMobSpawning")) {
                 int i = MathHelper.floor(this.locX);
                 int j = MathHelper.floor(this.locY);
                 int k = MathHelper.floor(this.locZ);
@@ -250,7 +251,7 @@ public class EntityZombie extends EntityMonster {
 
     protected void a(DifficultyDamageScaler difficultydamagescaler) {
         super.a(difficultydamagescaler);
-        if (this.random.nextFloat() < (this.world.getDifficulty() == EnumDifficulty.HARD ? 0.05F : 0.01F)) {
+        if (this.random.nextFloat() < (this.world.getDifficulty() == Difficulty.HARD ? 0.05F : 0.01F)) {
             int i = this.random.nextInt(3);
 
             if (i == 0) {
@@ -286,15 +287,15 @@ public class EntityZombie extends EntityMonster {
 
     public void b(EntityLiving entityliving) {
         super.b(entityliving);
-        if ((this.world.getDifficulty() == EnumDifficulty.NORMAL || this.world.getDifficulty() == EnumDifficulty.HARD) && entityliving instanceof EntityVillager) {
-            if (this.world.getDifficulty() != EnumDifficulty.HARD && this.random.nextBoolean()) {
+        if ((this.world.getDifficulty() == Difficulty.NORMAL || this.world.getDifficulty() == Difficulty.HARD) && entityliving instanceof EntityVillager) {
+            if (this.world.getDifficulty() != Difficulty.HARD && this.random.nextBoolean()) {
                 return;
             }
 
             EntityVillager entityvillager = (EntityVillager) entityliving;
             EntityZombieVillager entityzombievillager = new EntityZombieVillager(this.world);
 
-            entityzombievillager.u(entityvillager);
+            entityzombievillager.copyPosition(entityvillager);
             this.world.kill(entityvillager);
             entityzombievillager.prepare(this.world.D(new BlockPosition(entityzombievillager)), new EntityZombie.GroupDataZombie(false, null));
             entityzombievillager.setProfession(entityvillager.getProfession());
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
index dde846c61..dff3f6eb3 100644
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -85,7 +85,7 @@ public class EntityZombieVillager extends EntityZombie {
             }
 
             if (!this.world.isClientSide) {
-                this.a(entityhuman.getUniqueID(), this.random.nextInt(2401) + 3600);
+                this.a(entityhuman.getUUID(), this.random.nextInt(2401) + 3600);
             }
 
             return true;
@@ -107,14 +107,14 @@ public class EntityZombieVillager extends EntityZombie {
         this.conversionTime = i;
         this.getDataWatcher().set(EntityZombieVillager.b, Boolean.valueOf(true));
         this.removeEffect(MobEffects.WEAKNESS);
-        this.addEffect(new MobEffect(MobEffects.INCREASE_DAMAGE, i, Math.min(this.world.getDifficulty().a() - 1, 0)));
+        this.addEffect(new MobEffect(MobEffects.INCREASE_DAMAGE, i, Math.min(this.world.getDifficulty().getId() - 1, 0)));
         this.world.broadcastEntityEffect(this, (byte) 16);
     }
 
     protected void dt() {
         EntityVillager entityvillager = new EntityVillager(this.world);
 
-        entityvillager.u(this);
+        entityvillager.copyPosition(this);
         entityvillager.setProfession(this.getProfession());
         entityvillager.a(this.world.D(new BlockPosition(entityvillager)), (GroupDataEntity) null, false);
         entityvillager.dp();
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 61fbdeb6a..ea4874172 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -137,7 +137,7 @@ public class Explosion {
                         // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
                         CraftEventFactory.entityDamage = source;
                         entity.forceExplosionKnockback = false;
-                        boolean wasDamaged = entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
+                        boolean wasDamaged = entity.hurt(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 7.0D * (double) f3 + 1.0D)));
                         CraftEventFactory.entityDamage = null;
                         if (!wasDamaged && !(entity instanceof EntityTNTPrimed || entity instanceof EntityFallingBlock) && !entity.forceExplosionKnockback) {
                             continue;
diff --git a/src/main/java/net/minecraft/server/FoodMetaData.java b/src/main/java/net/minecraft/server/FoodMetaData.java
index c715138ee..4a1662731 100644
--- a/src/main/java/net/minecraft/server/FoodMetaData.java
+++ b/src/main/java/net/minecraft/server/FoodMetaData.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
+
 public class FoodMetaData {
 
     public int foodLevel = 20;
@@ -38,14 +40,14 @@ public class FoodMetaData {
     }
 
     public void a(EntityHuman entityhuman) {
-        EnumDifficulty enumdifficulty = entityhuman.world.getDifficulty();
+        Difficulty enumdifficulty = entityhuman.world.getDifficulty();
 
         this.e = this.foodLevel;
         if (this.exhaustionLevel > 4.0F) {
             this.exhaustionLevel -= 4.0F;
             if (this.saturationLevel > 0.0F) {
                 this.saturationLevel = Math.max(this.saturationLevel - 1.0F, 0.0F);
-            } else if (enumdifficulty != EnumDifficulty.PEACEFUL) {
+            } else if (enumdifficulty != Difficulty.PEACEFUL) {
                 // CraftBukkit start
                 org.bukkit.event.entity.FoodLevelChangeEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callFoodLevelChangeEvent(entityhuman, Math.max(this.foodLevel - 1, 0));
 
@@ -79,8 +81,8 @@ public class FoodMetaData {
         } else if (this.foodLevel <= 0) {
             ++this.foodTickTimer;
             if (this.foodTickTimer >= 80) {
-                if (entityhuman.getHealth() > 10.0F || enumdifficulty == EnumDifficulty.HARD || entityhuman.getHealth() > 1.0F && enumdifficulty == EnumDifficulty.NORMAL) {
-                    entityhuman.damageEntity(DamageSource.STARVE, 1.0F);
+                if (entityhuman.getHealth() > 10.0F || enumdifficulty == Difficulty.HARD || entityhuman.getHealth() > 1.0F && enumdifficulty == Difficulty.NORMAL) {
+                    entityhuman.hurt(DamageSource.STARVE, 1.0F);
                 }
 
                 this.foodTickTimer = 0;
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 000000000..a38d92f4b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,825 @@
+package net.minecraft.server;
+
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
+
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+public class Item {
+
+    public static final RegistryMaterials<MinecraftKey, Item> REGISTRY = new RegistryMaterials();
+    private static final Map<Block, Item> a = Maps.newHashMap();
+    private static final IDynamicTexture b = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture c = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture d = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture e = new IDynamicTexture() {
+    };
+    private final IRegistry<MinecraftKey, IDynamicTexture> f = new RegistrySimple();
+    protected static final UUID h = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+    protected static final UUID i = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
+    private CreativeModeTab n;
+    protected static Random j = new Random();
+    protected int maxStackSize = 64;
+    private int durability;
+    protected boolean l;
+    protected boolean m;
+    private Item craftingResult;
+    private String name;
+
+    public static int getId(Item item) {
+        return item == null ? 0 : Item.REGISTRY.a(item);
+    }
+
+    public static Item getById(int i) {
+        return Item.REGISTRY.getId(i);
+    }
+
+    public static Item getItemOf(Block block) {
+        Item item = (Item) Item.a.get(block);
+
+        return item == null ? Items.a : item;
+    }
+
+    @Nullable
+    public static Item b(String s) {
+        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            try {
+                return getById(Integer.parseInt(s));
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+        }
+
+        return item;
+    }
+
+    public final void a(MinecraftKey minecraftkey, IDynamicTexture idynamictexture) {
+        this.f.a(minecraftkey, idynamictexture);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        return false;
+    }
+
+    public Item() {
+        this.a(new MinecraftKey("lefthanded"), Item.d);
+        this.a(new MinecraftKey("cooldown"), Item.e);
+    }
+
+    public Item d(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        return InteractionResult.PASS;
+    }
+
+    public float getDestroySpeed(ItemStack itemstack, IBlockData iblockdata) {
+        return 1.0F;
+    }
+
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+        return new InteractionResultWrapper(InteractionResult.PASS, entityhuman.b(enumhand));
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean k() {
+        return this.m;
+    }
+
+    protected Item a(boolean flag) {
+        this.m = flag;
+        return this;
+    }
+
+    public int getMaxDurability() {
+        return this.durability;
+    }
+
+    protected Item setMaxDurability(int i) {
+        this.durability = i;
+        if (i > 0) {
+            this.a(new MinecraftKey("damaged"), Item.b);
+            this.a(new MinecraftKey("damage"), Item.c);
+        }
+
+        return this;
+    }
+
+    public boolean usesDurability() {
+        return this.durability > 0 && (!this.m || this.maxStackSize == 1);
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
+        return false;
+    }
+
+    public boolean canDestroySpecialBlock(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving, EnumHand enumhand) {
+        return false;
+    }
+
+    public Item n() {
+        this.l = true;
+        return this;
+    }
+
+    public Item c(String s) {
+        this.name = s;
+        return this;
+    }
+
+    public String j(ItemStack itemstack) {
+        return LocaleI18n.get(this.a(itemstack));
+    }
+
+    public String getName() {
+        return "item." + this.name;
+    }
+
+    public String a(ItemStack itemstack) {
+        return "item." + this.name;
+    }
+
+    public Item b(Item item) {
+        this.craftingResult = item;
+        return this;
+    }
+
+    public boolean p() {
+        return true;
+    }
+
+    @Nullable
+    public Item q() {
+        return this.craftingResult;
+    }
+
+    public boolean r() {
+        return this.craftingResult != null;
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void b(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean f() {
+        return false;
+    }
+
+    public EnumAnimation f(ItemStack itemstack) {
+        return EnumAnimation.NONE;
+    }
+
+    public int e(ItemStack itemstack) {
+        return 0;
+    }
+
+    public void a(ItemStack itemstack, World world, EntityLiving entityliving, int i) {}
+
+    public String b(ItemStack itemstack) {
+        return LocaleI18n.get(this.j(itemstack) + ".name").trim();
+    }
+
+    public EnumItemRarity g(ItemStack itemstack) {
+        return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+    }
+
+    public boolean g_(ItemStack itemstack) {
+        return this.getMaxStackSize() == 1 && this.usesDurability();
+    }
+
+    protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+        float f = entityhuman.pitch;
+        float f1 = entityhuman.yaw;
+        double d0 = entityhuman.locX;
+        double d1 = entityhuman.locY + (double) entityhuman.getHeadHeight();
+        double d2 = entityhuman.locZ;
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
+        float f6 = f3 * f4;
+        float f7 = f2 * f4;
+        double d3 = 5.0D;
+        Vec3D vec3d1 = vec3d.add((double) f6 * 5.0D, (double) f5 * 5.0D, (double) f7 * 5.0D);
+
+        return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+    }
+
+    public int c() {
+        return 0;
+    }
+
+    public void a(CreativeModeTab creativemodetab, NonNullList<ItemStack> nonnulllist) {
+        if (this.a(creativemodetab)) {
+            nonnulllist.add(new ItemStack(this));
+        }
+
+    }
+
+    protected boolean a(CreativeModeTab creativemodetab) {
+        CreativeModeTab creativemodetab1 = this.b();
+
+        return creativemodetab1 != null && (creativemodetab == CreativeModeTab.g || creativemodetab == creativemodetab1);
+    }
+
+    @Nullable
+    public CreativeModeTab b() {
+        return this.n;
+    }
+
+    public Item b(CreativeModeTab creativemodetab) {
+        this.n = creativemodetab;
+        return this;
+    }
+
+    public boolean s() {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return false;
+    }
+
+    public Multimap<String, AttributeModifier> a(EnumItemSlot enumitemslot) {
+        return HashMultimap.create();
+    }
+
+    public static void t() {
+        a(Blocks.AIR, (Item) (new ItemAir(Blocks.AIR)));
+        a(Blocks.STONE, (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
+            }
+        })).c("stone"));
+        a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+        a(Blocks.DIRT, (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
+            }
+        })).c("dirt"));
+        b(Blocks.COBBLESTONE);
+        a(Blocks.PLANKS, (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("wood"));
+        a(Blocks.SAPLING, (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("sapling"));
+        b(Blocks.BEDROCK);
+        a((Block) Blocks.SAND, (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSand.EnumSandVariant.a(itemstack.getData()).e();
+            }
+        })).c("sand"));
+        b(Blocks.GRAVEL);
+        b(Blocks.GOLD_ORE);
+        b(Blocks.IRON_ORE);
+        b(Blocks.COAL_ORE);
+        a(Blocks.LOG, (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("log"));
+        a(Blocks.LOG2, (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
+            }
+        })).c("log"));
+        a((Block) Blocks.LEAVES, (new ItemLeaves(Blocks.LEAVES)).c("leaves"));
+        a((Block) Blocks.LEAVES2, (new ItemLeaves(Blocks.LEAVES2)).c("leaves"));
+        a(Blocks.SPONGE, (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
+            }
+        })).c("sponge"));
+        b(Blocks.GLASS);
+        b(Blocks.LAPIS_ORE);
+        b(Blocks.LAPIS_BLOCK);
+        b(Blocks.DISPENSER);
+        a(Blocks.SANDSTONE, (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("sandStone"));
+        b(Blocks.NOTEBLOCK);
+        b(Blocks.GOLDEN_RAIL);
+        b(Blocks.DETECTOR_RAIL);
+        a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+        b(Blocks.WEB);
+        a((Block) Blocks.TALLGRASS, (Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern"}));
+        b((Block) Blocks.DEADBUSH);
+        a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+        a(Blocks.WOOL, (new ItemCloth(Blocks.WOOL)).c("cloth"));
+        a((Block) Blocks.YELLOW_FLOWER, (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData()).d();
+            }
+        })).c("flower"));
+        a((Block) Blocks.RED_FLOWER, (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
+            }
+        })).c("rose"));
+        b((Block) Blocks.BROWN_MUSHROOM);
+        b((Block) Blocks.RED_MUSHROOM);
+        b(Blocks.GOLD_BLOCK);
+        b(Blocks.IRON_BLOCK);
+        a((Block) Blocks.STONE_SLAB, (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).c("stoneSlab"));
+        b(Blocks.BRICK_BLOCK);
+        b(Blocks.TNT);
+        b(Blocks.BOOKSHELF);
+        b(Blocks.MOSSY_COBBLESTONE);
+        b(Blocks.OBSIDIAN);
+        b(Blocks.TORCH);
+        b(Blocks.END_ROD);
+        b(Blocks.CHORUS_PLANT);
+        b(Blocks.CHORUS_FLOWER);
+        b(Blocks.PURPUR_BLOCK);
+        b(Blocks.PURPUR_PILLAR);
+        b(Blocks.PURPUR_STAIRS);
+        a((Block) Blocks.PURPUR_SLAB, (new ItemStep(Blocks.PURPUR_SLAB, Blocks.PURPUR_SLAB, Blocks.PURPUR_DOUBLE_SLAB)).c("purpurSlab"));
+        b(Blocks.MOB_SPAWNER);
+        b(Blocks.OAK_STAIRS);
+        b((Block) Blocks.CHEST);
+        b(Blocks.DIAMOND_ORE);
+        b(Blocks.DIAMOND_BLOCK);
+        b(Blocks.CRAFTING_TABLE);
+        b(Blocks.FARMLAND);
+        b(Blocks.FURNACE);
+        b(Blocks.LADDER);
+        b(Blocks.RAIL);
+        b(Blocks.STONE_STAIRS);
+        b(Blocks.LEVER);
+        b(Blocks.STONE_PRESSURE_PLATE);
+        b(Blocks.WOODEN_PRESSURE_PLATE);
+        b(Blocks.REDSTONE_ORE);
+        b(Blocks.REDSTONE_TORCH);
+        b(Blocks.STONE_BUTTON);
+        a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+        b(Blocks.ICE);
+        b(Blocks.SNOW);
+        b((Block) Blocks.CACTUS);
+        b(Blocks.CLAY);
+        b(Blocks.JUKEBOX);
+        b(Blocks.FENCE);
+        b(Blocks.SPRUCE_FENCE);
+        b(Blocks.BIRCH_FENCE);
+        b(Blocks.JUNGLE_FENCE);
+        b(Blocks.DARK_OAK_FENCE);
+        b(Blocks.ACACIA_FENCE);
+        b(Blocks.PUMPKIN);
+        b(Blocks.NETHERRACK);
+        b(Blocks.SOUL_SAND);
+        b(Blocks.GLOWSTONE);
+        b(Blocks.LIT_PUMPKIN);
+        b(Blocks.TRAPDOOR);
+        a(Blocks.MONSTER_EGG, (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
+            }
+        })).c("monsterStoneEgg"));
+        a(Blocks.STONEBRICK, (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
+            }
+        })).c("stonebricksmooth"));
+        b(Blocks.BROWN_MUSHROOM_BLOCK);
+        b(Blocks.RED_MUSHROOM_BLOCK);
+        b(Blocks.IRON_BARS);
+        b(Blocks.GLASS_PANE);
+        b(Blocks.MELON_BLOCK);
+        a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+        b(Blocks.FENCE_GATE);
+        b(Blocks.SPRUCE_FENCE_GATE);
+        b(Blocks.BIRCH_FENCE_GATE);
+        b(Blocks.JUNGLE_FENCE_GATE);
+        b(Blocks.DARK_OAK_FENCE_GATE);
+        b(Blocks.ACACIA_FENCE_GATE);
+        b(Blocks.BRICK_STAIRS);
+        b(Blocks.STONE_BRICK_STAIRS);
+        b((Block) Blocks.MYCELIUM);
+        a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+        b(Blocks.NETHER_BRICK);
+        b(Blocks.NETHER_BRICK_FENCE);
+        b(Blocks.NETHER_BRICK_STAIRS);
+        b(Blocks.ENCHANTING_TABLE);
+        b(Blocks.END_PORTAL_FRAME);
+        b(Blocks.END_STONE);
+        b(Blocks.END_BRICKS);
+        b(Blocks.DRAGON_EGG);
+        b(Blocks.REDSTONE_LAMP);
+        a((Block) Blocks.WOODEN_SLAB, (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).c("woodSlab"));
+        b(Blocks.SANDSTONE_STAIRS);
+        b(Blocks.EMERALD_ORE);
+        b(Blocks.ENDER_CHEST);
+        b((Block) Blocks.TRIPWIRE_HOOK);
+        b(Blocks.EMERALD_BLOCK);
+        b(Blocks.SPRUCE_STAIRS);
+        b(Blocks.BIRCH_STAIRS);
+        b(Blocks.JUNGLE_STAIRS);
+        b(Blocks.COMMAND_BLOCK);
+        b((Block) Blocks.BEACON);
+        a(Blocks.COBBLESTONE_WALL, (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
+            }
+        })).c("cobbleWall"));
+        b(Blocks.WOODEN_BUTTON);
+        a(Blocks.ANVIL, (new ItemAnvil(Blocks.ANVIL)).c("anvil"));
+        b(Blocks.TRAPPED_CHEST);
+        b(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+        b(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+        b((Block) Blocks.DAYLIGHT_DETECTOR);
+        b(Blocks.REDSTONE_BLOCK);
+        b(Blocks.QUARTZ_ORE);
+        b((Block) Blocks.HOPPER);
+        a(Blocks.QUARTZ_BLOCK, (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, new String[] { "default", "chiseled", "lines"})).c("quartzBlock"));
+        b(Blocks.QUARTZ_STAIRS);
+        b(Blocks.ACTIVATOR_RAIL);
+        b(Blocks.DROPPER);
+        a(Blocks.STAINED_HARDENED_CLAY, (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).c("clayHardenedStained"));
+        b(Blocks.BARRIER);
+        b(Blocks.IRON_TRAPDOOR);
+        b(Blocks.HAY_BLOCK);
+        a(Blocks.CARPET, (new ItemCloth(Blocks.CARPET)).c("woolCarpet"));
+        b(Blocks.HARDENED_CLAY);
+        b(Blocks.COAL_BLOCK);
+        b(Blocks.PACKED_ICE);
+        b(Blocks.ACACIA_STAIRS);
+        b(Blocks.DARK_OAK_STAIRS);
+        b(Blocks.SLIME);
+        b(Blocks.GRASS_PATH);
+        a((Block) Blocks.DOUBLE_PLANT, (new ItemMultiTexture(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
+            }
+        })).c("doublePlant"));
+        a((Block) Blocks.STAINED_GLASS, (new ItemCloth(Blocks.STAINED_GLASS)).c("stainedGlass"));
+        a((Block) Blocks.STAINED_GLASS_PANE, (new ItemCloth(Blocks.STAINED_GLASS_PANE)).c("stainedGlassPane"));
+        a(Blocks.PRISMARINE, (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
+            }
+        })).c("prismarine"));
+        b(Blocks.SEA_LANTERN);
+        a(Blocks.RED_SANDSTONE, (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("redSandStone"));
+        b(Blocks.RED_SANDSTONE_STAIRS);
+        a((Block) Blocks.STONE_SLAB2, (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2)).c("stoneSlab2"));
+        b(Blocks.dc);
+        b(Blocks.dd);
+        b(Blocks.df);
+        b(Blocks.dg);
+        b(Blocks.dh);
+        b(Blocks.di);
+        b(Blocks.dj);
+        b(Blocks.dk);
+        a(Blocks.WHITE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.WHITE_SHULKER_BOX)));
+        a(Blocks.dm, (Item) (new ItemShulkerBox(Blocks.dm)));
+        a(Blocks.dn, (Item) (new ItemShulkerBox(Blocks.dn)));
+        a(Blocks.LIGHT_BLUE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.LIGHT_BLUE_SHULKER_BOX)));
+        a(Blocks.dp, (Item) (new ItemShulkerBox(Blocks.dp)));
+        a(Blocks.dq, (Item) (new ItemShulkerBox(Blocks.dq)));
+        a(Blocks.dr, (Item) (new ItemShulkerBox(Blocks.dr)));
+        a(Blocks.ds, (Item) (new ItemShulkerBox(Blocks.ds)));
+        a(Blocks.dt, (Item) (new ItemShulkerBox(Blocks.dt)));
+        a(Blocks.du, (Item) (new ItemShulkerBox(Blocks.du)));
+        a(Blocks.dv, (Item) (new ItemShulkerBox(Blocks.dv)));
+        a(Blocks.dw, (Item) (new ItemShulkerBox(Blocks.dw)));
+        a(Blocks.dx, (Item) (new ItemShulkerBox(Blocks.dx)));
+        a(Blocks.dy, (Item) (new ItemShulkerBox(Blocks.dy)));
+        a(Blocks.dz, (Item) (new ItemShulkerBox(Blocks.dz)));
+        a(Blocks.dA, (Item) (new ItemShulkerBox(Blocks.dA)));
+        b(Blocks.dB);
+        b(Blocks.dC);
+        b(Blocks.dD);
+        b(Blocks.dE);
+        b(Blocks.dF);
+        b(Blocks.dG);
+        b(Blocks.dH);
+        b(Blocks.dI);
+        b(Blocks.dJ);
+        b(Blocks.dK);
+        b(Blocks.dL);
+        b(Blocks.dM);
+        b(Blocks.dN);
+        b(Blocks.dO);
+        b(Blocks.dP);
+        b(Blocks.dQ);
+        a(Blocks.dR, (new ItemCloth(Blocks.dR)).c("concrete"));
+        a(Blocks.dS, (new ItemCloth(Blocks.dS)).c("concrete_powder"));
+        b(Blocks.STRUCTURE_BLOCK);
+        a(256, "iron_shovel", (new ItemSpade(EnumToolMaterial.IRON)).c("shovelIron"));
+        a(257, "iron_pickaxe", (new ItemPickaxe(EnumToolMaterial.IRON)).c("pickaxeIron"));
+        a(258, "iron_axe", (new ItemAxe(EnumToolMaterial.IRON)).c("hatchetIron"));
+        a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+        a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+        a(261, "bow", (new ItemBow()).c("bow"));
+        a(262, "arrow", (new ItemArrow()).c("arrow"));
+        a(263, "coal", (new ItemCoal()).c("coal"));
+        a(264, "diamond", (new Item()).c("diamond").b(CreativeModeTab.l));
+        a(265, "iron_ingot", (new Item()).c("ingotIron").b(CreativeModeTab.l));
+        a(266, "gold_ingot", (new Item()).c("ingotGold").b(CreativeModeTab.l));
+        a(267, "iron_sword", (new ItemSword(EnumToolMaterial.IRON)).c("swordIron"));
+        a(268, "wooden_sword", (new ItemSword(EnumToolMaterial.WOOD)).c("swordWood"));
+        a(269, "wooden_shovel", (new ItemSpade(EnumToolMaterial.WOOD)).c("shovelWood"));
+        a(270, "wooden_pickaxe", (new ItemPickaxe(EnumToolMaterial.WOOD)).c("pickaxeWood"));
+        a(271, "wooden_axe", (new ItemAxe(EnumToolMaterial.WOOD)).c("hatchetWood"));
+        a(272, "stone_sword", (new ItemSword(EnumToolMaterial.STONE)).c("swordStone"));
+        a(273, "stone_shovel", (new ItemSpade(EnumToolMaterial.STONE)).c("shovelStone"));
+        a(274, "stone_pickaxe", (new ItemPickaxe(EnumToolMaterial.STONE)).c("pickaxeStone"));
+        a(275, "stone_axe", (new ItemAxe(EnumToolMaterial.STONE)).c("hatchetStone"));
+        a(276, "diamond_sword", (new ItemSword(EnumToolMaterial.DIAMOND)).c("swordDiamond"));
+        a(277, "diamond_shovel", (new ItemSpade(EnumToolMaterial.DIAMOND)).c("shovelDiamond"));
+        a(278, "diamond_pickaxe", (new ItemPickaxe(EnumToolMaterial.DIAMOND)).c("pickaxeDiamond"));
+        a(279, "diamond_axe", (new ItemAxe(EnumToolMaterial.DIAMOND)).c("hatchetDiamond"));
+        a(280, "stick", (new Item()).n().c("stick").b(CreativeModeTab.l));
+        a(281, "bowl", (new Item()).c("bowl").b(CreativeModeTab.l));
+        a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+        a(283, "golden_sword", (new ItemSword(EnumToolMaterial.GOLD)).c("swordGold"));
+        a(284, "golden_shovel", (new ItemSpade(EnumToolMaterial.GOLD)).c("shovelGold"));
+        a(285, "golden_pickaxe", (new ItemPickaxe(EnumToolMaterial.GOLD)).c("pickaxeGold"));
+        a(286, "golden_axe", (new ItemAxe(EnumToolMaterial.GOLD)).c("hatchetGold"));
+        a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").b(CreativeModeTab.l));
+        a(288, "feather", (new Item()).c("feather").b(CreativeModeTab.l));
+        a(289, "gunpowder", (new Item()).c("sulphur").b(CreativeModeTab.l));
+        a(290, "wooden_hoe", (new ItemHoe(EnumToolMaterial.WOOD)).c("hoeWood"));
+        a(291, "stone_hoe", (new ItemHoe(EnumToolMaterial.STONE)).c("hoeStone"));
+        a(292, "iron_hoe", (new ItemHoe(EnumToolMaterial.IRON)).c("hoeIron"));
+        a(293, "diamond_hoe", (new ItemHoe(EnumToolMaterial.DIAMOND)).c("hoeDiamond"));
+        a(294, "golden_hoe", (new ItemHoe(EnumToolMaterial.GOLD)).c("hoeGold"));
+        a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+        a(296, "wheat", (new Item()).c("wheat").b(CreativeModeTab.l));
+        a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+        a(298, "leather_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.HEAD)).c("helmetCloth"));
+        a(299, "leather_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.CHEST)).c("chestplateCloth"));
+        a(300, "leather_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.LEGS)).c("leggingsCloth"));
+        a(301, "leather_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.FEET)).c("bootsCloth"));
+        a(302, "chainmail_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.HEAD)).c("helmetChain"));
+        a(303, "chainmail_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.CHEST)).c("chestplateChain"));
+        a(304, "chainmail_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.LEGS)).c("leggingsChain"));
+        a(305, "chainmail_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.FEET)).c("bootsChain"));
+        a(306, "iron_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.HEAD)).c("helmetIron"));
+        a(307, "iron_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.CHEST)).c("chestplateIron"));
+        a(308, "iron_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.LEGS)).c("leggingsIron"));
+        a(309, "iron_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.FEET)).c("bootsIron"));
+        a(310, "diamond_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.HEAD)).c("helmetDiamond"));
+        a(311, "diamond_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.CHEST)).c("chestplateDiamond"));
+        a(312, "diamond_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.LEGS)).c("leggingsDiamond"));
+        a(313, "diamond_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.FEET)).c("bootsDiamond"));
+        a(314, "golden_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.HEAD)).c("helmetGold"));
+        a(315, "golden_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.CHEST)).c("chestplateGold"));
+        a(316, "golden_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.LEGS)).c("leggingsGold"));
+        a(317, "golden_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.FEET)).c("bootsGold"));
+        a(318, "flint", (new Item()).c("flint").b(CreativeModeTab.l));
+        a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+        a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+        a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+        a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().c("appleGold"));
+        a(323, "sign", (new ItemSign()).c("sign"));
+        a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+        Item item = (new ItemBucket(Blocks.AIR)).c("bucket").d(16);
+
+        a(325, "bucket", item);
+        a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").b(item));
+        a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").b(item));
+        a(328, "minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.RIDEABLE)).c("minecart"));
+        a(329, "saddle", (new ItemSaddle()).c("saddle"));
+        a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+        a(331, "redstone", (new ItemRedstone()).c("redstone"));
+        a(332, "snowball", (new ItemSnowball()).c("snowball"));
+        a(333, "boat", new ItemBoat(EntityBoat.EnumBoatType.OAK));
+        a(334, "leather", (new Item()).c("leather").b(CreativeModeTab.l));
+        a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").b(item));
+        a(336, "brick", (new Item()).c("brick").b(CreativeModeTab.l));
+        a(337, "clay_ball", (new Item()).c("clay").b(CreativeModeTab.l));
+        a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").b(CreativeModeTab.l));
+        a(339, "paper", (new Item()).c("paper").b(CreativeModeTab.f));
+        a(340, "book", (new ItemBook()).c("book").b(CreativeModeTab.f));
+        a(341, "slime_ball", (new Item()).c("slimeball").b(CreativeModeTab.f));
+        a(342, "chest_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.CHEST)).c("minecartChest"));
+        a(343, "furnace_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.FURNACE)).c("minecartFurnace"));
+        a(344, "egg", (new ItemEgg()).c("egg"));
+        a(345, "compass", (new ItemCompass()).c("compass").b(CreativeModeTab.i));
+        a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+        a(347, "clock", (new ItemClock()).c("clock").b(CreativeModeTab.i));
+        a(348, "glowstone_dust", (new Item()).c("yellowDust").b(CreativeModeTab.l));
+        a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+        a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+        a(351, "dye", (new ItemDye()).c("dyePowder"));
+        a(352, "bone", (new Item()).c("bone").n().b(CreativeModeTab.f));
+        a(353, "sugar", (new Item()).c("sugar").b(CreativeModeTab.l));
+        a(354, "cake", (new ItemReed(Blocks.CAKE)).d(1).c("cake").b(CreativeModeTab.h));
+        a(355, "bed", (new ItemBed()).d(1).c("bed"));
+        a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").b(CreativeModeTab.d));
+        a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+        a(358, "filled_map", (new ItemWorldMap()).c("map"));
+        a(359, "shears", (new ItemShears()).c("shears"));
+        a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+        a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+        a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+        a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+        a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+        a(365, "chicken", (new ItemFood(2, 0.3F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.3F).c("chickenRaw"));
+        a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+        a(367, "rotten_flesh", (new ItemFood(4, 0.1F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.8F).c("rottenFlesh"));
+        a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+        a(369, "blaze_rod", (new Item()).c("blazeRod").b(CreativeModeTab.l).n());
+        a(370, "ghast_tear", (new Item()).c("ghastTear").b(CreativeModeTab.k));
+        a(371, "gold_nugget", (new Item()).c("goldNugget").b(CreativeModeTab.l));
+        a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds"));
+        a(373, "potion", (new ItemPotion()).c("potion"));
+        Item item1 = (new ItemGlassBottle()).c("glassBottle");
+
+        a(374, "glass_bottle", item1);
+        a(375, "spider_eye", (new ItemFood(2, 0.8F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 1.0F).c("spiderEye"));
+        a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").b(CreativeModeTab.k));
+        a(377, "blaze_powder", (new Item()).c("blazePowder").b(CreativeModeTab.k));
+        a(378, "magma_cream", (new Item()).c("magmaCream").b(CreativeModeTab.k));
+        a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").b(CreativeModeTab.k));
+        a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").b(CreativeModeTab.k));
+        a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+        a(382, "speckled_melon", (new Item()).c("speckledMelon").b(CreativeModeTab.k));
+        a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+        a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+        a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+        a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").b(CreativeModeTab.f));
+        a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").d(16));
+        a(388, "emerald", (new Item()).c("emerald").b(CreativeModeTab.l));
+        a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+        a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").b(CreativeModeTab.c));
+        a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+        a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+        a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+        a(394, "poisonous_potato", (new ItemFood(2, 0.3F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 0.6F).c("potatoPoisonous"));
+        a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+        a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").b(CreativeModeTab.k));
+        a(397, "skull", (new ItemSkull()).c("skull"));
+        a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+        a(399, "nether_star", (new ItemNetherStar()).c("netherStar").b(CreativeModeTab.l));
+        a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").b(CreativeModeTab.h));
+        a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+        a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").b(CreativeModeTab.f));
+        a(403, "enchanted_book", (new ItemEnchantedBook()).d(1).c("enchantedBook"));
+        a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").b(CreativeModeTab.d));
+        a(405, "netherbrick", (new Item()).c("netherbrick").b(CreativeModeTab.l));
+        a(406, "quartz", (new Item()).c("netherquartz").b(CreativeModeTab.l));
+        a(407, "tnt_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.TNT)).c("minecartTnt"));
+        a(408, "hopper_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.HOPPER)).c("minecartHopper"));
+        a(409, "prismarine_shard", (new Item()).c("prismarineShard").b(CreativeModeTab.l));
+        a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").b(CreativeModeTab.l));
+        a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+        a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+        a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+        a(414, "rabbit_foot", (new Item()).c("rabbitFoot").b(CreativeModeTab.k));
+        a(415, "rabbit_hide", (new Item()).c("rabbitHide").b(CreativeModeTab.l));
+        a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").d(16));
+        a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").d(1).b(CreativeModeTab.f));
+        a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").d(1).b(CreativeModeTab.f));
+        a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").d(1).b(CreativeModeTab.f));
+        a(420, "lead", (new ItemLeash()).c("leash"));
+        a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+        a(422, "command_block_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK)).c("minecartCommandBlock").b((CreativeModeTab) null));
+        a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+        a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+        a(425, "banner", (new ItemBanner()).c("banner"));
+        a(426, "end_crystal", new ItemEndCrystal());
+        a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+        a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+        a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+        a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+        a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+        a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).h().c("chorusFruit").b(CreativeModeTab.l));
+        a(433, "chorus_fruit_popped", (new Item()).c("chorusFruitPopped").b(CreativeModeTab.l));
+        a(434, "beetroot", (new ItemFood(1, 0.6F, false)).c("beetroot"));
+        a(435, "beetroot_seeds", (new ItemSeeds(Blocks.BEETROOT, Blocks.FARMLAND)).c("beetroot_seeds"));
+        a(436, "beetroot_soup", (new ItemSoup(6)).c("beetroot_soup"));
+        a(437, "dragon_breath", (new Item()).b(CreativeModeTab.k).c("dragon_breath").b(item1));
+        a(438, "splash_potion", (new ItemSplashPotion()).c("splash_potion"));
+        a(439, "spectral_arrow", (new ItemSpectralArrow()).c("spectral_arrow"));
+        a(440, "tipped_arrow", (new ItemTippedArrow()).c("tipped_arrow"));
+        a(441, "lingering_potion", (new ItemLingeringPotion()).c("lingering_potion"));
+        a(442, "shield", (new ItemShield()).c("shield"));
+        a(443, "elytra", (new ItemElytra()).c("elytra"));
+        a(444, "spruce_boat", new ItemBoat(EntityBoat.EnumBoatType.SPRUCE));
+        a(445, "birch_boat", new ItemBoat(EntityBoat.EnumBoatType.BIRCH));
+        a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
+        a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
+        a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
+        a(449, "totem_of_undying", (new Item()).c("totem").d(1).b(CreativeModeTab.j));
+        a(450, "shulker_shell", (new Item()).c("shulkerShell").b(CreativeModeTab.l));
+        a(452, "iron_nugget", (new Item()).c("ironNugget").b(CreativeModeTab.l));
+        a(453, "knowledge_book", (new ItemKnowledgeBook()).c("knowledgeBook"));
+        a(2256, "record_13", (new ItemRecord("13", SoundEffects.gb)).c("record"));
+        a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.gd)).c("record"));
+        a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.gc)).c("record"));
+        a(2259, "record_chirp", (new ItemRecord("chirp", SoundEffects.ge)).c("record"));
+        a(2260, "record_far", (new ItemRecord("far", SoundEffects.gf)).c("record"));
+        a(2261, "record_mall", (new ItemRecord("mall", SoundEffects.gg)).c("record"));
+        a(2262, "record_mellohi", (new ItemRecord("mellohi", SoundEffects.gh)).c("record"));
+        a(2263, "record_stal", (new ItemRecord("stal", SoundEffects.gi)).c("record"));
+        a(2264, "record_strad", (new ItemRecord("strad", SoundEffects.gj)).c("record"));
+        a(2265, "record_ward", (new ItemRecord("ward", SoundEffects.gl)).c("record"));
+        a(2266, "record_11", (new ItemRecord("11", SoundEffects.ga)).c("record"));
+        a(2267, "record_wait", (new ItemRecord("wait", SoundEffects.gk)).c("record"));
+    }
+
+    private static void b(Block block) {
+        a(block, (Item) (new ItemBlock(block)));
+    }
+
+    protected static void a(Block block, Item item) {
+        a(Block.getId(block), (MinecraftKey) Block.REGISTRY.b(block), item);
+        Item.a.put(block, item);
+    }
+
+    private static void a(int i, String s, Item item) {
+        a(i, new MinecraftKey(s), item);
+    }
+
+    private static void a(int i, MinecraftKey minecraftkey, Item item) {
+        Item.REGISTRY.a(i, minecraftkey, item);
+    }
+
+    public static enum EnumToolMaterial {
+
+        WOOD(0, 59, 2.0F, 0.0F, 15), STONE(1, 131, 4.0F, 1.0F, 5), IRON(2, 250, 6.0F, 2.0F, 14), DIAMOND(3, 1561, 8.0F, 3.0F, 10), GOLD(0, 32, 12.0F, 0.0F, 22);
+
+        private final int f;
+        private final int g;
+        private final float h;
+        private final float i;
+        private final int j;
+
+        private EnumToolMaterial(int i, int j, float f, float f1, int k) {
+            this.f = i;
+            this.g = j;
+            this.h = f;
+            this.i = f1;
+            this.j = k;
+        }
+
+        public int a() {
+            return this.g;
+        }
+
+        public float b() {
+            return this.h;
+        }
+
+        public float c() {
+            return this.i;
+        }
+
+        public int d() {
+            return this.f;
+        }
+
+        public int e() {
+            return this.j;
+        }
+
+        public Item f() {
+            return this == EnumToolMaterial.WOOD ? Item.getItemOf(Blocks.PLANKS) : (this == EnumToolMaterial.STONE ? Item.getItemOf(Blocks.COBBLESTONE) : (this == EnumToolMaterial.GOLD ? Items.GOLD_INGOT : (this == EnumToolMaterial.IRON ? Items.IRON_INGOT : (this == EnumToolMaterial.DIAMOND ? Items.DIAMOND : null))));
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemRecord.java b/src/main/java/net/minecraft/server/ItemRecord.java
index 23363cb1c..acf37dcd7 100644
--- a/src/main/java/net/minecraft/server/ItemRecord.java
+++ b/src/main/java/net/minecraft/server/ItemRecord.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Maps;
+import net.minecraft.world.InteractionResult;
+
 import java.util.Map;
 
 public class ItemRecord extends Item {
@@ -17,12 +19,12 @@ public class ItemRecord extends Item {
         ItemRecord.a.put(this.b, this);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
         if (iblockdata.getBlock() == Blocks.JUKEBOX && !((Boolean) iblockdata.get(BlockJukeBox.HAS_RECORD)).booleanValue()) {
             if (!world.isClientSide) {
-                if (true) return EnumInteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
+                if (true) return InteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ItemStack itemstack = entityhuman.b(enumhand);
 
                 ((BlockJukeBox) Blocks.JUKEBOX).a(world, blockposition, iblockdata, itemstack);
@@ -31,9 +33,9 @@ public class ItemRecord extends Item {
                 entityhuman.b(StatisticList.X);
             }
 
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else {
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemReed.java b/src/main/java/net/minecraft/server/ItemReed.java
index 81a2f3609..ebd95184a 100644
--- a/src/main/java/net/minecraft/server/ItemReed.java
+++ b/src/main/java/net/minecraft/server/ItemReed.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.item.ItemBlock;
+
 public class ItemReed extends Item {
 
     public final Block a; // PAIL: private->public
@@ -8,7 +11,7 @@ public class ItemReed extends Item {
         this.a = block;
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
         Block block = iblockdata.getBlock();
 
@@ -24,7 +27,7 @@ public class ItemReed extends Item {
             IBlockData iblockdata1 = this.a.getPlacedState(world, blockposition, enumdirection, f, f1, f2, 0, entityhuman);
 
             if (!world.setTypeAndData(blockposition, iblockdata1, 11)) {
-                return EnumInteractionResult.FAIL;
+                return InteractionResult.FAIL;
             } else {
                 iblockdata1 = world.getType(blockposition);
                 if (iblockdata1.getBlock() == this.a) {
@@ -39,10 +42,10 @@ public class ItemReed extends Item {
 
                 world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
                 itemstack.subtract(1);
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             }
         } else {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 299a1a15e..ec673ed7d 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import com.mojang.authlib.GameProfile;
 import java.util.UUID;
+
+import net.minecraft.world.InteractionResult;
 import org.apache.commons.lang3.StringUtils;
 
 public class ItemSkull extends Item {
@@ -14,9 +16,9 @@ public class ItemSkull extends Item {
         this.a(true);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (enumdirection == EnumDirection.DOWN) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
@@ -24,7 +26,7 @@ public class ItemSkull extends Item {
 
             if (!flag) {
                 if (!world.getType(blockposition).getMaterial().isBuildable()) {
-                    return EnumInteractionResult.FAIL;
+                    return InteractionResult.FAIL;
                 }
 
                 blockposition = blockposition.shift(enumdirection);
@@ -34,12 +36,12 @@ public class ItemSkull extends Item {
 
             if (entityhuman.a(blockposition, enumdirection, itemstack) && Blocks.SKULL.canPlace(world, blockposition)) {
                 if (world.isClientSide) {
-                    return EnumInteractionResult.SUCCESS;
+                    return InteractionResult.SUCCESS;
                 } else {
                     // Spigot Start
                     if ( !Blocks.SKULL.canPlace( world, blockposition ) )
                     {
-                        return EnumInteractionResult.FAIL;
+                        return InteractionResult.FAIL;
                     }
                     // Spigot End
                     world.setTypeAndData(blockposition, Blocks.SKULL.getBlockData().set(BlockSkull.FACING, enumdirection), 11);
@@ -81,10 +83,10 @@ public class ItemSkull extends Item {
                     }
 
                     itemstack.subtract(1);
-                    return EnumInteractionResult.SUCCESS;
+                    return InteractionResult.SUCCESS;
                 }
             } else {
-                return EnumInteractionResult.FAIL;
+                return InteractionResult.FAIL;
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemStack.java b/src/main/java/net/minecraft/server/ItemStack.java
index c5f5fa4e7..783802ef6 100644
--- a/src/main/java/net/minecraft/server/ItemStack.java
+++ b/src/main/java/net/minecraft/server/ItemStack.java
@@ -10,6 +10,11 @@ import javax.annotation.Nullable;
 import java.util.List;
 import java.util.Map;
 
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
+import net.minecraft.world.item.ItemBlock;
+import net.minecraft.world.item.ItemBucket;
+import net.minecraft.world.item.ItemDye;
 import org.bukkit.Location;
 import org.bukkit.TreeType;
 import org.bukkit.block.BlockState;
@@ -172,7 +177,7 @@ public final class ItemStack {
         return this.g ? Item.getItemOf(Blocks.AIR) : this.item;
     }
 
-    public EnumInteractionResult placeItem(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult placeItem(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         // CraftBukkit start - handle all block place event logic here
         int oldData = this.getData();
         int oldCount = this.getCount();
@@ -188,7 +193,7 @@ public final class ItemStack {
             }
         }
         world.captureDrops = new java.util.ArrayList<>(); // Paper - Don't drop items if block place is cancelled
-        EnumInteractionResult enuminteractionresult = this.getItem().a(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
+        InteractionResult enuminteractionresult = this.getItem().a(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
         int newData = this.getData();
         int newCount = this.getCount();
         this.setCount(oldCount);
@@ -196,7 +201,7 @@ public final class ItemStack {
         world.captureBlockStates = false;
         List<EntityItem> drops = world.captureDrops; // Paper - Don't drop items if block place is cancelled
         world.captureDrops = null; // Paper - Don't drop items if block place is cancelled
-        if (enuminteractionresult == EnumInteractionResult.SUCCESS && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
+        if (enuminteractionresult == InteractionResult.SUCCESS && world.captureTreeGeneration && world.capturedBlockStates.size() > 0) {
             world.captureTreeGeneration = false;
             Location location = new Location(world.getWorld(), blockposition.getX(), blockposition.getY(), blockposition.getZ());
             TreeType treeType = BlockSapling.treeType;
@@ -224,7 +229,7 @@ public final class ItemStack {
         }
         world.captureTreeGeneration = false;
 
-        if (enuminteractionresult == EnumInteractionResult.SUCCESS) {
+        if (enuminteractionresult == InteractionResult.SUCCESS) {
             org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
             List<BlockState> blocks = (List<BlockState>) world.capturedBlockStates.clone();
             world.capturedBlockStates.clear();
@@ -235,7 +240,7 @@ public final class ItemStack {
             }
 
             if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
-                enuminteractionresult = EnumInteractionResult.FAIL; // cancel placement
+                enuminteractionresult = InteractionResult.FAIL; // cancel placement
                 // PAIL: Remove this when MC-99075 fixed
                 placeEvent.getPlayer().updateInventory();
 
@@ -307,7 +312,7 @@ public final class ItemStack {
                 }
 
                 // SPIGOT-1288 - play sound stripped from ItemBlock
-                if (this.item instanceof ItemBlock) {
+                if (this.item instanceof net.minecraft.world.item.ItemBlock) {
                     SoundEffectType soundeffecttype = ((ItemBlock) this.item).getBlock().getStepSound();
                     world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
                 }
diff --git a/src/main/java/net/minecraft/server/ItemWaterLily.java b/src/main/java/net/minecraft/server/ItemWaterLily.java
index 2af53fe05..a88405083 100644
--- a/src/main/java/net/minecraft/server/ItemWaterLily.java
+++ b/src/main/java/net/minecraft/server/ItemWaterLily.java
@@ -1,23 +1,26 @@
 package net.minecraft.server;
 
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
+
 public class ItemWaterLily extends ItemWithAuxData {
 
     public ItemWaterLily(Block block) {
         super(block, false);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
         MovingObjectPosition movingobjectposition = this.a(world, entityhuman, true);
 
         if (movingobjectposition == null) {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
         } else {
             if (movingobjectposition.type == MovingObjectPosition.EnumMovingObjectType.BLOCK) {
                 BlockPosition blockposition = movingobjectposition.a();
 
                 if (!world.a(entityhuman, blockposition) || !entityhuman.a(blockposition.shift(movingobjectposition.direction), movingobjectposition.direction, itemstack)) {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 }
 
                 BlockPosition blockposition1 = blockposition.up();
@@ -30,7 +33,7 @@ public class ItemWaterLily extends ItemWithAuxData {
                     org.bukkit.event.block.BlockPlaceEvent placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(world, entityhuman, enumhand, blockstate, blockposition.getX(), blockposition.getY(), blockposition.getZ());
                     if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
                         blockstate.update(true, false);
-                        return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
                     }
                     // CraftBukkit end
                     if (entityhuman instanceof EntityPlayer) {
@@ -43,11 +46,11 @@ public class ItemWaterLily extends ItemWithAuxData {
 
                     entityhuman.b(StatisticList.b((Item) this));
                     world.a(entityhuman, blockposition, SoundEffects.it, SoundCategory.BLOCKS, 1.0F, 1.0F);
-                    return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
                 }
             }
 
-            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+            return new InteractionResultWrapper(InteractionResult.FAIL, itemstack);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemWrittenBook.java b/src/main/java/net/minecraft/server/ItemWrittenBook.java
index 0e91a152e..0d226eb8d 100644
--- a/src/main/java/net/minecraft/server/ItemWrittenBook.java
+++ b/src/main/java/net/minecraft/server/ItemWrittenBook.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
+
 public class ItemWrittenBook extends Item {
 
     public ItemWrittenBook() {
@@ -35,7 +38,7 @@ public class ItemWrittenBook extends Item {
         return super.b(itemstack);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!world.isClientSide) {
@@ -44,7 +47,7 @@ public class ItemWrittenBook extends Item {
 
         entityhuman.a(itemstack, enumhand);
         entityhuman.b(StatisticList.b((Item) this));
-        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+        return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
     }
 
     private void a(ItemStack itemstack, EntityHuman entityhuman) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3b982f990..5f710a29e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
@@ -27,7 +26,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Date;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Queue;
 import java.util.Random;
@@ -35,17 +33,15 @@ import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+
+import net.minecraft.world.Difficulty;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import joptsimple.OptionSet;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
 // CraftBukkit end
 import org.spigotmc.SlackActivityAccountant; // Spigot
 import co.aikar.timings.MinecraftTimings; // Paper
@@ -420,7 +416,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     public abstract EnumGamemode getGamemode();
 
-    public abstract EnumDifficulty getDifficulty();
+    public abstract Difficulty getDifficulty();
 
     public abstract boolean isHardcore();
 
@@ -1290,7 +1286,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         this.I = keypair;
     }
 
-    public void a(EnumDifficulty enumdifficulty) {
+    public void a(Difficulty enumdifficulty) {
         // CraftBukkit start
         // WorldServer[] aworldserver = this.worldServer;
         int i = this.worlds.size();
@@ -1301,11 +1297,11 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
             if (worldserver != null) {
                 if (worldserver.getWorldData().isHardcore()) {
-                    worldserver.getWorldData().setDifficulty(EnumDifficulty.HARD);
+                    worldserver.getWorldData().setDifficulty(Difficulty.HARD);
                     worldserver.setSpawnFlags(true, true);
                 } else if (this.R()) {
                     worldserver.getWorldData().setDifficulty(enumdifficulty);
-                    worldserver.setSpawnFlags(worldserver.getDifficulty() != EnumDifficulty.PEACEFUL, true);
+                    worldserver.setSpawnFlags(worldserver.getDifficulty() != Difficulty.PEACEFUL, true);
                 } else {
                     worldserver.getWorldData().setDifficulty(enumdifficulty);
                     worldserver.setSpawnFlags(this.getSpawnMonsters(), this.spawnAnimals);
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 461fad973..9507ffafa 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -60,10 +60,10 @@ public class MobEffectList {
             }
         } else if (this == MobEffects.POISON) {
             if (entityliving.getHealth() > 1.0F) {
-                entityliving.damageEntity(CraftEventFactory.POISON, 1.0F);  // CraftBukkit - DamageSource.MAGIC -> CraftEventFactory.POISON
+                entityliving.hurt(CraftEventFactory.POISON, 1.0F);  // CraftBukkit - DamageSource.MAGIC -> CraftEventFactory.POISON
             }
         } else if (this == MobEffects.WITHER) {
-            entityliving.damageEntity(DamageSource.WITHER, 1.0F);
+            entityliving.hurt(DamageSource.WITHER, 1.0F);
         } else if (this == MobEffects.HUNGER && entityliving instanceof EntityHuman) {
             ((EntityHuman) entityliving).applyExhaustion(0.005F * (float) (i + 1));
         } else if (this == MobEffects.SATURATION && entityliving instanceof EntityHuman) {
@@ -83,7 +83,7 @@ public class MobEffectList {
             }
         } else if ((this != MobEffects.HEAL || entityliving.cc()) && (this != MobEffects.HARM || !entityliving.cc())) {
             if (this == MobEffects.HARM && !entityliving.cc() || this == MobEffects.HEAL && entityliving.cc()) {
-                entityliving.damageEntity(DamageSource.MAGIC, (float) (6 << i));
+                entityliving.hurt(DamageSource.MAGIC, (float) (6 << i));
             }
         } else {
             entityliving.heal((float) Math.max(4 << i, 0), RegainReason.MAGIC); // CraftBukkit
@@ -98,9 +98,9 @@ public class MobEffectList {
             if (this == MobEffects.HARM && !entityliving.cc() || this == MobEffects.HEAL && entityliving.cc()) {
                 j = (int) (d0 * (double) (6 << i) + 0.5D);
                 if (entity == null) {
-                    entityliving.damageEntity(DamageSource.MAGIC, (float) j);
+                    entityliving.hurt(DamageSource.MAGIC, (float) j);
                 } else {
-                    entityliving.damageEntity(DamageSource.b(entity, entity1), (float) j);
+                    entityliving.hurt(DamageSource.b(entity, entity1), (float) j);
                 }
             }
         } else {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java b/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
index 493ce70a6..081d59a6b 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalBreakDoor.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.minecraft.world.Difficulty;
+
 public class PathfinderGoalBreakDoor extends PathfinderGoalDoorInteract {
 
     private int g;
@@ -62,7 +64,7 @@ public class PathfinderGoalBreakDoor extends PathfinderGoalDoorInteract {
             this.h = i;
         }
 
-        if (this.g == 240 && this.a.world.getDifficulty() == EnumDifficulty.HARD) {
+        if (this.g == 240 && this.a.world.getDifficulty() == Difficulty.HARD) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreakDoorEvent(this.a, this.b.getX(), this.b.getY(), this.b.getZ()).isCancelled()) {
                 this.c();
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 59d526329..e77a21ec3 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1,16 +1,12 @@
 package net.minecraft.server;
 
-import com.google.common.collect.Lists;
 import com.google.common.primitives.Doubles;
 import com.google.common.primitives.Floats;
-import com.google.common.util.concurrent.Futures;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Set;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
@@ -2225,7 +2221,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
             TileEntitySign tileentitysign = (TileEntitySign) tileentity;
 
-            if (!tileentitysign.a() || tileentitysign.signEditor == null || !tileentitysign.signEditor.equals(this.player.getUniqueID())) { // Paper
+            if (!tileentitysign.a() || tileentitysign.signEditor == null || !tileentitysign.signEditor.equals(this.player.getUUID())) { // Paper
                 this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
                 this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
                 return;
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 3d8679824..d09c2a856 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -2,6 +2,10 @@ package net.minecraft.server;
 
 // CraftBukkit start
 import java.util.ArrayList;
+
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
+import net.minecraft.world.item.ItemBlock;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.event.Event;
@@ -420,21 +424,21 @@ public class PlayerInteractManager {
         }
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand) {
+    public InteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand) {
         if (this.gamemode == EnumGamemode.SPECTATOR) {
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         } else if (entityhuman.getCooldownTracker().a(itemstack.getItem())) {
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         } else {
             int i = itemstack.getCount();
             int j = itemstack.getData();
             InteractionResultWrapper interactionresultwrapper = itemstack.a(world, entityhuman, enumhand);
-            ItemStack itemstack1 = (ItemStack) interactionresultwrapper.b();
+            ItemStack itemstack1 = (ItemStack) interactionresultwrapper.getObject();
 
             if (itemstack1 == itemstack && itemstack1.getCount() == i && itemstack1.m() <= 0 && itemstack1.getData() == j) {
-                return interactionresultwrapper.a();
-            } else if (interactionresultwrapper.a() == EnumInteractionResult.FAIL && itemstack1.m() > 0 && !entityhuman.isHandRaised()) {
-                return interactionresultwrapper.a();
+                return interactionresultwrapper.getResult();
+            } else if (interactionresultwrapper.getResult() == InteractionResult.FAIL && itemstack1.m() > 0 && !entityhuman.isHandRaised()) {
+                return interactionresultwrapper.getResult();
             } else {
                 entityhuman.a(enumhand, itemstack1);
                 if (this.isCreative()) {
@@ -452,7 +456,7 @@ public class PlayerInteractManager {
                     ((EntityPlayer) entityhuman).updateInventory(entityhuman.defaultContainer);
                 }
 
-                return interactionresultwrapper.a();
+                return interactionresultwrapper.getResult();
             }
         }
     }
@@ -460,9 +464,9 @@ public class PlayerInteractManager {
     // CraftBukkit start - whole method
     public boolean interactResult = false;
     public boolean firedInteract = false;
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData blockdata = world.getType(blockposition);
-        EnumInteractionResult enuminteractionresult = EnumInteractionResult.FAIL;
+        InteractionResult enuminteractionresult = InteractionResult.FAIL;
         if (blockdata.getBlock() != Blocks.AIR) {
             boolean cancelledBlock = false;
 
@@ -475,7 +479,7 @@ public class PlayerInteractManager {
                 cancelledBlock = true;
             }
 
-            if (itemstack.getItem() instanceof ItemBlock && !entityhuman.isCreativeAndOp()) {
+            if (itemstack.getItem() instanceof net.minecraft.world.item.ItemBlock && !entityhuman.isCreativeAndOp()) {
                 Block block1 = ((ItemBlock) itemstack.getItem()).getBlock();
 
                 if (block1 instanceof BlockCommand || block1 instanceof BlockStructure) {
@@ -514,7 +518,7 @@ public class PlayerInteractManager {
                 // Paper end - extend Player Interact cancellation
                 }
                 ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory(); // SPIGOT-2867
-                enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+                enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? InteractionResult.SUCCESS : InteractionResult.PASS;
             } else if (this.gamemode == EnumGamemode.SPECTATOR) {
                 TileEntity tileentity = world.getTileEntity(blockposition);
 
@@ -528,23 +532,23 @@ public class PlayerInteractManager {
 
                     if (itileinventory != null) {
                         entityhuman.openContainer(itileinventory);
-                        return EnumInteractionResult.SUCCESS;
+                        return InteractionResult.SUCCESS;
                     }
                 } else if (tileentity instanceof IInventory) {
                     entityhuman.openContainer((IInventory) tileentity);
-                    return EnumInteractionResult.SUCCESS;
+                    return InteractionResult.SUCCESS;
                 }
 
-                return EnumInteractionResult.PASS;
+                return InteractionResult.PASS;
             } else {
                 if (!entityhuman.isSneaking() || entityhuman.getItemInMainHand().isEmpty() && entityhuman.getItemInOffHand().isEmpty()) {
                     IBlockData iblockdata = world.getType(blockposition);
 
-                    enuminteractionresult = iblockdata.getBlock().interact(world, blockposition, iblockdata, entityhuman, enumhand, enumdirection, f, f1, f2) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+                    enuminteractionresult = iblockdata.getBlock().interact(world, blockposition, iblockdata, entityhuman, enumhand, enumdirection, f, f1, f2) ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 }
             }
 
-            if (!itemstack.isEmpty() && enuminteractionresult != EnumInteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
+            if (!itemstack.isEmpty() && enuminteractionresult != InteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
                 int i = itemstack.getData();
                 int j = itemstack.getCount();
 
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index 84f59b750..d795caba2 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -7,7 +7,8 @@ import javax.annotation.Nullable;
 
 // CraftBukkit start
 import java.util.ArrayList;
-import java.util.List;
+
+import net.minecraft.world.item.ItemArmor;
 import org.bukkit.Location;
 
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 80e9c9200..614eb890f 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -206,14 +206,14 @@ public abstract class PlayerList {
                 Iterator iterator1;
                 Entity entity1;
 
-                if (entity.getUniqueID().equals(uuid)) {
+                if (entity.getUUID().equals(uuid)) {
                     entityplayer.a(entity, true);
                 } else {
                     iterator1 = entity.bG().iterator();
 
                     while (iterator1.hasNext()) {
                         entity1 = (Entity) iterator1.next();
-                        if (entity1.getUniqueID().equals(uuid)) {
+                        if (entity1.getUUID().equals(uuid)) {
                             entityplayer.a(entity1, true);
                             break;
                         }
@@ -361,7 +361,7 @@ public abstract class PlayerList {
     public void onPlayerJoin(EntityPlayer entityplayer, String joinMessage) { // CraftBukkit added param
         this.players.add(entityplayer);
         this.playersByName.put(entityplayer.getName(), entityplayer); // Spigot
-        this.j.put(entityplayer.getUniqueID(), entityplayer);
+        this.j.put(entityplayer.getUUID(), entityplayer);
         // this.sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer})); // CraftBukkit - replaced with loop below
         WorldServer worldserver = this.server.getWorldServer(entityplayer.dimension);
 
@@ -467,7 +467,7 @@ public abstract class PlayerList {
         entityplayer.getAdvancementData().a();
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getName()); // Spigot
-        UUID uuid = entityplayer.getUniqueID();
+        UUID uuid = entityplayer.getUUID();
         EntityPlayer entityplayer1 = (EntityPlayer) this.j.get(uuid);
 
         if (entityplayer1 == entityplayer) {
@@ -509,7 +509,7 @@ public abstract class PlayerList {
 
         for (int i = 0; i < this.players.size(); ++i) {
             entityplayer = (EntityPlayer) this.players.get(i);
-            if (entityplayer.getUniqueID().equals(uuid)) {
+            if (entityplayer.getUUID().equals(uuid)) {
                 arraylist.add(entityplayer);
             }
         }
@@ -729,7 +729,7 @@ public abstract class PlayerList {
             worldserver.addEntity(entityplayer1);
             this.players.add(entityplayer1);
             this.playersByName.put(entityplayer1.getName(), entityplayer1); // Spigot
-            this.j.put(entityplayer1.getUniqueID(), entityplayer1);
+            this.j.put(entityplayer1.getUUID(), entityplayer1);
         }
         // entityplayer1.syncInventory();
         entityplayer1.setHealth(entityplayer1.getHealth());
@@ -1133,7 +1133,7 @@ public abstract class PlayerList {
 
             s = s + ((EntityPlayer) arraylist.get(i)).getName();
             if (flag) {
-                s = s + " (" + ((EntityPlayer) arraylist.get(i)).bn() + ")";
+                s = s + " (" + ((EntityPlayer) arraylist.get(i)).getStringUUID() + ")";
             }
         }
 
@@ -1453,7 +1453,7 @@ public abstract class PlayerList {
     }
 
     public ServerStatisticManager getStatisticManager(EntityPlayer entityhuman) {
-        UUID uuid = entityhuman.getUniqueID();
+        UUID uuid = entityhuman.getUUID();
         ServerStatisticManager serverstatisticmanager = uuid == null ? null : (ServerStatisticManager) entityhuman.getStatisticManager();
         // CraftBukkit end
 
@@ -1478,7 +1478,7 @@ public abstract class PlayerList {
     }
 
     public AdvancementDataPlayer h(EntityPlayer entityplayer) {
-        UUID uuid = entityplayer.getUniqueID();
+        UUID uuid = entityplayer.getUUID();
         AdvancementDataPlayer advancementdataplayer = (AdvancementDataPlayer) entityplayer.getAdvancementData(); // CraftBukkit
 
         if (advancementdataplayer == null) {
diff --git a/src/main/java/net/minecraft/server/RecipeArmorDye.java b/src/main/java/net/minecraft/server/RecipeArmorDye.java
index 123002ec7..0a2a53e13 100644
--- a/src/main/java/net/minecraft/server/RecipeArmorDye.java
+++ b/src/main/java/net/minecraft/server/RecipeArmorDye.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.minecraft.world.item.ItemArmor;
+
 import java.util.ArrayList;
 
 public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
@@ -19,10 +21,10 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
             ItemStack itemstack1 = inventorycrafting.getItem(i);
 
             if (!itemstack1.isEmpty()) {
-                if (itemstack1.getItem() instanceof ItemArmor) {
-                    ItemArmor itemarmor = (ItemArmor) itemstack1.getItem();
+                if (itemstack1.getItem() instanceof net.minecraft.world.item.ItemArmor) {
+                    net.minecraft.world.item.ItemArmor itemarmor = (net.minecraft.world.item.ItemArmor) itemstack1.getItem();
 
-                    if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
+                    if (itemarmor.d() != net.minecraft.world.item.ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
                         return false;
                     }
 
@@ -45,7 +47,7 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
         int[] aint = new int[3];
         int i = 0;
         int j = 0;
-        ItemArmor itemarmor = null;
+        net.minecraft.world.item.ItemArmor itemarmor = null;
 
         int k;
         int l;
@@ -57,8 +59,8 @@ public class RecipeArmorDye extends ShapelessRecipes implements IRecipe { // Cra
             ItemStack itemstack1 = inventorycrafting.getItem(k);
 
             if (!itemstack1.isEmpty()) {
-                if (itemstack1.getItem() instanceof ItemArmor) {
-                    itemarmor = (ItemArmor) itemstack1.getItem();
+                if (itemstack1.getItem() instanceof net.minecraft.world.item.ItemArmor) {
+                    itemarmor = (net.minecraft.world.item.ItemArmor) itemstack1.getItem();
                     if (itemarmor.d() != ItemArmor.EnumArmorMaterial.LEATHER || !itemstack.isEmpty()) {
                         return ItemStack.a;
                     }
diff --git a/src/main/java/net/minecraft/server/RecipeFireworks.java b/src/main/java/net/minecraft/server/RecipeFireworks.java
index 859900d5f..b17eb1164 100644
--- a/src/main/java/net/minecraft/server/RecipeFireworks.java
+++ b/src/main/java/net/minecraft/server/RecipeFireworks.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import net.minecraft.world.item.ItemDye;
+
 import java.util.ArrayList;
 
 public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // CraftBukkit - added extends
@@ -95,7 +97,7 @@ public class RecipeFireworks extends ShapelessRecipes implements IRecipe { // Cr
 
                     if (!itemstack2.isEmpty()) {
                         if (itemstack2.getItem() == Items.DYE) {
-                            arraylist.add(Integer.valueOf(ItemDye.a[itemstack2.getData() & 15]));
+                            arraylist.add(Integer.valueOf(net.minecraft.world.item.ItemDye.a[itemstack2.getData() & 15]));
                         } else if (itemstack2.getItem() == Items.GLOWSTONE_DUST) {
                             nbttagcompound1.setBoolean("Flicker", true);
                         } else if (itemstack2.getItem() == Items.DIAMOND) {
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 7a1428105..fe0e2d0bc 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -4,6 +4,8 @@ import java.util.Iterator;
 // CraftBukkit start
 import java.util.List;
 
+import net.minecraft.world.item.ItemBoat;
+import net.minecraft.world.item.ItemDoor;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.FurnaceBurnEvent;
diff --git a/src/main/java/net/minecraft/server/TileEntitySign.java b/src/main/java/net/minecraft/server/TileEntitySign.java
index 95de8b055..fa22f6a08 100644
--- a/src/main/java/net/minecraft/server/TileEntitySign.java
+++ b/src/main/java/net/minecraft/server/TileEntitySign.java
@@ -122,7 +122,7 @@ public class TileEntitySign extends TileEntity {
     public void a(EntityHuman entityhuman) {
         // Paper start
         //this.h = entityhuman;
-        signEditor = entityhuman != null ? entityhuman.getUniqueID() : null;
+        signEditor = entityhuman != null ? entityhuman.getUUID() : null;
         // Paper end
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index bc231c7f2..2309dd1bd 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -13,20 +13,20 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
 import java.util.HashMap; // Paper
 import java.util.Map;
+
+import net.minecraft.world.Difficulty;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHashSet; // Paper
 import org.bukkit.event.block.BlockCanBuildEvent;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
@@ -1257,7 +1257,7 @@ public abstract class World implements IBlockAccess {
                     {
                         if ( iter.next().trackee == entity )
                         {
-                            map.decorations.remove(entity.getUniqueID()); // Paper
+                            map.decorations.remove(entity.getUUID()); // Paper
                             iter.remove();
                         }
                     }
@@ -2994,7 +2994,7 @@ public abstract class World implements IBlockAccess {
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
-            if (uuid.equals(entityhuman.getUniqueID())) {
+            if (uuid.equals(entityhuman.getUUID())) {
                 return entityhuman;
             }
         }
@@ -3261,7 +3261,7 @@ public abstract class World implements IBlockAccess {
         return new DifficultyDamageScaler(this.getDifficulty(), this.getDayTime(), i, f);
     }
 
-    public EnumDifficulty getDifficulty() {
+    public Difficulty getDifficulty() {
         return this.getWorldData().getDifficulty();
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldData.java b/src/main/java/net/minecraft/server/WorldData.java
index 7f0baf17a..30122a92a 100644
--- a/src/main/java/net/minecraft/server/WorldData.java
+++ b/src/main/java/net/minecraft/server/WorldData.java
@@ -6,6 +6,7 @@ import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 // CraftBukkit start
+import net.minecraft.world.Difficulty;
 import org.bukkit.Bukkit;
 import org.bukkit.event.weather.ThunderChangeEvent;
 import org.bukkit.event.weather.WeatherChangeEvent;
@@ -16,7 +17,7 @@ public class WorldData {
     private String b;
     private int c;
     private boolean d;
-    public static final EnumDifficulty a = EnumDifficulty.NORMAL;
+    public static final Difficulty a = Difficulty.NORMAL;
     private long e;
     private WorldType f;
     private String g;
@@ -41,7 +42,7 @@ public class WorldData {
     private boolean z;
     private boolean A;
     private boolean B;
-    private EnumDifficulty C;
+    private Difficulty C;
     private boolean D;
     private double E;
     private double F;
@@ -170,7 +171,7 @@ public class WorldData {
         }
 
         if (nbttagcompound.hasKeyOfType("Difficulty", 99)) {
-            this.C = EnumDifficulty.getById(nbttagcompound.getByte("Difficulty"));
+            this.C = Difficulty.getById(nbttagcompound.getByte("Difficulty"));
         }
 
         if (nbttagcompound.hasKeyOfType("DifficultyLocked", 1)) {
@@ -351,7 +352,7 @@ public class WorldData {
         nbttagcompound.setDouble("BorderWarningBlocks", (double) this.L);
         nbttagcompound.setDouble("BorderWarningTime", (double) this.M);
         if (this.C != null) {
-            nbttagcompound.setByte("Difficulty", (byte) this.C.a());
+            nbttagcompound.setByte("Difficulty", (byte) this.C.getId());
         }
 
         nbttagcompound.setBoolean("DifficultyLocked", this.D);
@@ -618,11 +619,11 @@ public class WorldData {
         this.M = i;
     }
 
-    public EnumDifficulty getDifficulty() {
+    public Difficulty getDifficulty() {
         return this.C;
     }
 
-    public void setDifficulty(EnumDifficulty enumdifficulty) {
+    public void setDifficulty(Difficulty enumdifficulty) {
         this.C = enumdifficulty;
         // CraftBukkit start
         PacketPlayOutServerDifficulty packet = new PacketPlayOutServerDifficulty(this.getDifficulty(), this.isDifficultyLocked());
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 59173605e..84525f76e 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -162,7 +162,7 @@ public class WorldMap extends PersistentBase {
         }
 
         if (!entityhuman.inventory.h(itemstack)) {
-            this.decorations.remove(entityhuman.getUniqueID()); // Spigot
+            this.decorations.remove(entityhuman.getUUID()); // Spigot
         }
 
         for (int i = 0; i < this.i.size(); ++i) {
@@ -170,7 +170,7 @@ public class WorldMap extends PersistentBase {
 
             if (!worldmap_worldmaphumantracker1.trackee.dead && (worldmap_worldmaphumantracker1.trackee.inventory.h(itemstack) || itemstack.z())) {
                 if (!itemstack.z() && worldmap_worldmaphumantracker1.trackee.dimension == this.map && this.track) {
-                    this.a(MapIcon.Type.PLAYER, worldmap_worldmaphumantracker1.trackee.world, worldmap_worldmaphumantracker1.trackee.getUniqueID(), worldmap_worldmaphumantracker1.trackee.locX, worldmap_worldmaphumantracker1.trackee.locZ, (double) worldmap_worldmaphumantracker1.trackee.yaw); // Spigot
+                    this.a(MapIcon.Type.PLAYER, worldmap_worldmaphumantracker1.trackee.world, worldmap_worldmaphumantracker1.trackee.getUUID(), worldmap_worldmaphumantracker1.trackee.locX, worldmap_worldmaphumantracker1.trackee.locZ, (double) worldmap_worldmaphumantracker1.trackee.yaw); // Spigot
                 }
             } else {
                 this.k.remove(worldmap_worldmaphumantracker1.trackee);
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
index 4bb6f600d..f5950e62a 100644
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -145,8 +145,8 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
         if(!com.destroystokyo.paper.PaperConfig.savePlayerData) return; // Paper - Make player data saving configurable
         try {
             NBTTagCompound nbttagcompound = entityhuman.save(new NBTTagCompound());
-            File file = new File(this.playerDir, entityhuman.bn() + ".dat.tmp");
-            File file1 = new File(this.playerDir, entityhuman.bn() + ".dat");
+            File file = new File(this.playerDir, entityhuman.getStringUUID() + ".dat.tmp");
+            File file1 = new File(this.playerDir, entityhuman.getStringUUID() + ".dat");
 
             NBTCompressedStreamTools.a(nbttagcompound, (OutputStream) (new FileOutputStream(file)));
             if (file1.exists()) {
@@ -165,7 +165,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
         NBTTagCompound nbttagcompound = null;
 
         try {
-            File file = new File(this.playerDir, entityhuman.bn() + ".dat");
+            File file = new File(this.playerDir, entityhuman.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
             if ( org.bukkit.Bukkit.getOnlineMode() && !file.exists() ) // Paper - Check online mode first
@@ -197,7 +197,7 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
             if (entityhuman instanceof EntityPlayer) {
                 CraftPlayer player = (CraftPlayer) entityhuman.getBukkitEntity();
                 // Only update first played if it is older than the one we have
-                long modified = new File(this.playerDir, entityhuman.getUniqueID().toString() + ".dat").lastModified();
+                long modified = new File(this.playerDir, entityhuman.getUUID().toString() + ".dat").lastModified();
                 if (modified < player.getFirstPlayed()) {
                     player.setFirstPlayed(modified);
                 }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index e545e9764..979eefcb9 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -2,7 +2,6 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.io.File;
 import java.util.ArrayList;
@@ -12,12 +11,11 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
 import java.util.UUID;
-import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.minecraft.world.Difficulty;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -25,10 +23,8 @@ import org.apache.logging.log4j.Logger;
 import java.util.logging.Level;
 
 import org.bukkit.WeatherType;
-import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.util.HashTreeSet;
 
-import org.bukkit.event.block.BlockFormEvent;
 import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.event.weather.LightningStrikeEvent;
 // CraftBukkit end
@@ -279,8 +275,8 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
     public void doTick() {
         super.doTick();
-        if (this.getWorldData().isHardcore() && this.getDifficulty() != EnumDifficulty.HARD) {
-            this.getWorldData().setDifficulty(EnumDifficulty.HARD);
+        if (this.getWorldData().isHardcore() && this.getDifficulty() != Difficulty.HARD) {
+            this.getWorldData().setDifficulty(Difficulty.HARD);
         }
 
         this.worldProvider.k().b();
@@ -976,7 +972,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         this.worldData.setDayTime(6000L);
         this.worldData.setGameType(EnumGamemode.SPECTATOR);
         this.worldData.g(false);
-        this.worldData.setDifficulty(EnumDifficulty.PEACEFUL);
+        this.worldData.setDifficulty(Difficulty.PEACEFUL);
         this.worldData.e(true);
         this.getGameRules().set("doDaylightCycle", "false");
     }
@@ -1169,7 +1165,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             }
             return false;
         } else {
-            UUID uuid = entity.getUniqueID();
+            UUID uuid = entity.getUUID();
 
             if (this.entitiesByUUID.containsKey(uuid)) {
                 Entity entity1 = (Entity) this.entitiesByUUID.get(uuid);
@@ -1210,7 +1206,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (DEBUG_ENTITIES) {
             entity.addedToWorldStack = getAddToWorldStackTrace(entity);
         }
-        Entity old = this.entitiesByUUID.put(entity.getUniqueID(), entity);
+        Entity old = this.entitiesByUUID.put(entity.getUUID(), entity);
         if (old != null && old.getId() != entity.getId() && old.valid && entity.world.paperConfig.duplicateUUIDMode != com.destroystokyo.paper.PaperWorldConfig.DuplicateUUIDMode.NOTHING) {
             Logger logger = LogManager.getLogger();
             if (DEBUG_ENTITIES) {
@@ -1240,10 +1236,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     protected void c(Entity entity) {
-        if (!this.entitiesByUUID.containsKey(entity.getUniqueID()) && !entity.valid) return; // Paper - Already removed, dont fire twice - this looks like it can happen even without our changes
+        if (!this.entitiesByUUID.containsKey(entity.getUUID()) && !entity.valid) return; // Paper - Already removed, dont fire twice - this looks like it can happen even without our changes
         super.c(entity);
         this.entitiesById.d(entity.getId());
-        this.entitiesByUUID.remove(entity.getUniqueID());
+        this.entitiesByUUID.remove(entity.getUUID());
         Entity[] aentity = entity.bb();
 
         if (aentity != null) {
diff --git a/src/main/java/net/minecraft/world/Difficulty.java b/src/main/java/net/minecraft/world/Difficulty.java
new file mode 100644
index 000000000..472ac25d8
--- /dev/null
+++ b/src/main/java/net/minecraft/world/Difficulty.java
@@ -0,0 +1,41 @@
+package net.minecraft.world;
+
+public enum Difficulty {
+    PEACEFUL(0, "options.difficulty.peaceful"),
+    EASY(1, "options.difficulty.easy"),
+    NORMAL(2, "options.difficulty.normal"),
+    HARD(3, "options.difficulty.hard");
+
+    private static final Difficulty[] e = new Difficulty[values().length];
+    private final int id;
+    private final String key;
+
+    Difficulty(final int id, final String name) {
+        this.id = id;
+        this.key = name;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public static Difficulty getById(int i) {
+        return Difficulty.e[i % Difficulty.e.length];
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    static {
+        Difficulty[] aenumdifficulty = values();
+        int i = aenumdifficulty.length;
+
+        for (int j = 0; j < i; ++j) {
+            Difficulty enumdifficulty = aenumdifficulty[j];
+
+            Difficulty.e[enumdifficulty.id] = enumdifficulty;
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/world/InteractionResult.java b/src/main/java/net/minecraft/world/InteractionResult.java
new file mode 100644
index 000000000..79ba69d78
--- /dev/null
+++ b/src/main/java/net/minecraft/world/InteractionResult.java
@@ -0,0 +1,7 @@
+package net.minecraft.world;
+
+public enum InteractionResult {
+    SUCCESS,
+    PASS,
+    FAIL;
+}
diff --git a/src/main/java/net/minecraft/world/InteractionResultWrapper.java b/src/main/java/net/minecraft/world/InteractionResultWrapper.java
new file mode 100644
index 000000000..3fd2833a8
--- /dev/null
+++ b/src/main/java/net/minecraft/world/InteractionResultWrapper.java
@@ -0,0 +1,32 @@
+package net.minecraft.world;
+
+public class InteractionResultWrapper<T> {
+
+    private final InteractionResult result;
+    private final T object;
+
+    public InteractionResultWrapper(InteractionResult result, T value) {
+        this.result = result;
+        this.object = value;
+    }
+
+    public InteractionResult getResult() {
+        return result;
+    }
+
+    public T getObject() {
+        return object;
+    }
+
+    public static <T> InteractionResultWrapper<T> success(T data) {
+        return new InteractionResultWrapper<>(InteractionResult.SUCCESS, data);
+    }
+
+    public static <T> InteractionResultWrapper<T> pass(T data) {
+        return new InteractionResultWrapper<>(InteractionResult.PASS, data);
+    }
+
+    public static <T> InteractionResultWrapper<T> fail(T data) {
+        return new InteractionResultWrapper<>(InteractionResult.FAIL, data);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EntityEnderCrystal.java
similarity index 50%
rename from src/main/java/net/minecraft/server/EntityEnderCrystal.java
rename to src/main/java/net/minecraft/world/entity/boss/enderdragon/EntityEnderCrystal.java
index 9e77fb633..ba1f3c756 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EntityEnderCrystal.java
@@ -1,24 +1,21 @@
-package net.minecraft.server;
+package net.minecraft.world.entity.boss.enderdragon;
 
 import com.google.common.base.Optional;
-import javax.annotation.Nullable;
+import net.minecraft.server.*;
 
-// CraftBukkit start
-import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.event.entity.ExplosionPrimeEvent;
-// CraftBukkit end
+import javax.annotation.Nullable;
 
 public class EntityEnderCrystal extends Entity {
 
-    private static final DataWatcherObject<Optional<BlockPosition>> b = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.k);
-    private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.h);
-    public int a;
+    private static final DataWatcherObject<Optional<BlockPosition>> DATA_BEAM_TARGET = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.k);
+    private static final DataWatcherObject<Boolean> DATA_SHOW_BOTTOM = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.h);
+    public int time;
 
     public EntityEnderCrystal(World world) {
         super(world);
         this.i = true;
         this.setSize(2.0F, 2.0F);
-        this.a = this.random.nextInt(100000);
+        this.time = random.nextInt(100000);
     }
 
     public EntityEnderCrystal(World world, double d0, double d1, double d2) {
@@ -30,30 +27,29 @@ public class EntityEnderCrystal extends Entity {
         return false;
     }
 
+    @Override
     protected void i() {
-        this.getDataWatcher().register(EntityEnderCrystal.b, Optional.absent());
-        this.getDataWatcher().register(EntityEnderCrystal.c, Boolean.valueOf(true));
+        this.getDataWatcher().register(EntityEnderCrystal.DATA_BEAM_TARGET, Optional.absent());
+        this.getDataWatcher().register(EntityEnderCrystal.DATA_SHOW_BOTTOM, Boolean.valueOf(true));
     }
 
+    @Override
     public void B_() {
         this.lastX = this.locX;
         this.lastY = this.locY;
         this.lastZ = this.locZ;
-        ++this.a;
+        ++this.time;
         if (!this.world.isClientSide) {
             BlockPosition blockposition = new BlockPosition(this);
 
             if (this.world.worldProvider instanceof WorldProviderTheEnd && this.world.getType(blockposition).getBlock() != Blocks.FIRE) {
-                // CraftBukkit start
-                if (!CraftEventFactory.callBlockIgniteEvent(this.world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
-                    this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
-                }
-                // CraftBukkit end
+                this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
             }
         }
 
     }
 
+    @Override
     protected void b(NBTTagCompound nbttagcompound) {
         if (this.getBeamTarget() != null) {
             nbttagcompound.set("BeamTarget", GameProfileSerializer.a(this.getBeamTarget()));
@@ -62,6 +58,7 @@ public class EntityEnderCrystal extends Entity {
         nbttagcompound.setBoolean("ShowBottom", this.isShowingBottom());
     }
 
+    @Override
     protected void a(NBTTagCompound nbttagcompound) {
         if (nbttagcompound.hasKeyOfType("BeamTarget", 10)) {
             this.setBeamTarget(GameProfileSerializer.c(nbttagcompound.getCompound("BeamTarget")));
@@ -73,37 +70,26 @@ public class EntityEnderCrystal extends Entity {
 
     }
 
+    @Override
     public boolean isInteractable() {
         return true;
     }
 
-    public boolean damageEntity(DamageSource damagesource, float f) {
-        if (this.isInvulnerable(damagesource)) {
+    @Override
+    public boolean hurt(DamageSource source, float amount) {
+        if (isInvulnerableTo(source)) {
             return false;
-        } else if (damagesource.getEntity() instanceof EntityEnderDragon) {
+        } else if (source.getEntity() instanceof EntityEnderDragon) {
             return false;
         } else {
-            if (!this.dead && !this.world.isClientSide) {
-                // CraftBukkit start - All non-living entities need this
-                if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, damagesource, f)) {
-                    return false;
-                }
-                // CraftBukkit end
+            if (!dead && !world.isClientSide) {
                 this.die();
-                if (!this.world.isClientSide) {
-                    if (!damagesource.isExplosion()) {
-                        // CraftBukkit start
-                        ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), 6.0F, true);
-                        this.world.getServer().getPluginManager().callEvent(event);
-                        if (event.isCancelled()) {
-                            this.dead = false;
-                            return false;
-                        }
-                        this.world.explode(this, this.locX, this.locY, this.locZ, event.getRadius(), event.getFire());
-                        // CraftBukkit end
+                if (!world.isClientSide) {
+                    if (!source.isExplosion()) {
+                        world.explode((Entity) null, this.locX, this.locY, this.locZ, 6.0F, true);
                     }
 
-                    this.a(damagesource);
+                    onDestroyedBy(source);
                 }
             }
 
@@ -111,37 +97,38 @@ public class EntityEnderCrystal extends Entity {
         }
     }
 
+    @Override
     public void killEntity() {
-        this.a(DamageSource.GENERIC);
+        this.onDestroyedBy(DamageSource.GENERIC);
         super.killEntity();
     }
 
-    private void a(DamageSource damagesource) {
+    private void onDestroyedBy(DamageSource source) {
         if (this.world.worldProvider instanceof WorldProviderTheEnd) {
             WorldProviderTheEnd worldprovidertheend = (WorldProviderTheEnd) this.world.worldProvider;
             EnderDragonBattle enderdragonbattle = worldprovidertheend.t();
 
             if (enderdragonbattle != null) {
-                enderdragonbattle.a(this, damagesource);
+                enderdragonbattle.a(this, source);
             }
         }
 
     }
 
     public void setBeamTarget(@Nullable BlockPosition blockposition) {
-        this.getDataWatcher().set(EntityEnderCrystal.b, Optional.fromNullable(blockposition));
+        this.getDataWatcher().set(EntityEnderCrystal.DATA_BEAM_TARGET, Optional.fromNullable(blockposition));
     }
 
     @Nullable
     public BlockPosition getBeamTarget() {
-        return (BlockPosition) ((Optional) this.getDataWatcher().get(EntityEnderCrystal.b)).orNull();
+        return (BlockPosition) ((Optional) this.getDataWatcher().get(EntityEnderCrystal.DATA_BEAM_TARGET)).orNull();
     }
 
     public void setShowingBottom(boolean flag) {
-        this.getDataWatcher().set(EntityEnderCrystal.c, Boolean.valueOf(flag));
+        this.getDataWatcher().set(EntityEnderCrystal.DATA_SHOW_BOTTOM, Boolean.valueOf(flag));
     }
 
     public boolean isShowingBottom() {
-        return ((Boolean) this.getDataWatcher().get(EntityEnderCrystal.c)).booleanValue();
+        return ((Boolean) this.getDataWatcher().get(EntityEnderCrystal.DATA_SHOW_BOTTOM)).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemArmor.java b/src/main/java/net/minecraft/world/item/ItemArmor.java
similarity index 95%
rename from src/main/java/net/minecraft/server/ItemArmor.java
rename to src/main/java/net/minecraft/world/item/ItemArmor.java
index 921cddd20..c503c6106 100644
--- a/src/main/java/net/minecraft/server/ItemArmor.java
+++ b/src/main/java/net/minecraft/world/item/ItemArmor.java
@@ -1,4 +1,4 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 import com.google.common.base.Predicates;
 import com.google.common.collect.Multimap;
@@ -6,6 +6,9 @@ import java.util.List;
 import java.util.UUID;
 
 // CraftBukkit start
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.block.BlockDispenseEvent;
 // CraftBukkit end
@@ -162,7 +165,7 @@ public class ItemArmor extends Item {
         return this.p.c() == itemstack1.getItem() ? true : super.a(itemstack, itemstack1);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
         EnumItemSlot enumitemslot = EntityInsentient.d(itemstack);
         ItemStack itemstack1 = entityhuman.getEquipment(enumitemslot);
@@ -170,9 +173,9 @@ public class ItemArmor extends Item {
         if (itemstack1.isEmpty()) {
             entityhuman.setSlot(enumitemslot, itemstack.cloneItemStack());
             itemstack.setCount(0);
-            return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
         } else {
-            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+            return new InteractionResultWrapper(InteractionResult.FAIL, itemstack);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/world/item/ItemBlock.java
similarity index 90%
rename from src/main/java/net/minecraft/server/ItemBlock.java
rename to src/main/java/net/minecraft/world/item/ItemBlock.java
index a5730d1c7..8e23d5d59 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/world/item/ItemBlock.java
@@ -1,4 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 
 import javax.annotation.Nullable;
 
@@ -10,7 +13,7 @@ public class ItemBlock extends Item {
         this.a = block;
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
         Block block = iblockdata.getBlock();
 
@@ -40,9 +43,9 @@ public class ItemBlock extends Item {
                 itemstack.subtract(1);
             }
 
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBoat.java b/src/main/java/net/minecraft/world/item/ItemBoat.java
similarity index 78%
rename from src/main/java/net/minecraft/server/ItemBoat.java
rename to src/main/java/net/minecraft/world/item/ItemBoat.java
index 680e16acc..1ede8a833 100644
--- a/src/main/java/net/minecraft/server/ItemBoat.java
+++ b/src/main/java/net/minecraft/world/item/ItemBoat.java
@@ -1,4 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 
 import java.util.List;
 
@@ -13,7 +17,7 @@ public class ItemBoat extends Item {
         this.c("boat." + entityboat_enumboattype.a());
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
         float f = 1.0F;
         float f1 = entityhuman.lastPitch + (entityhuman.pitch - entityhuman.lastPitch) * 1.0F;
@@ -33,7 +37,7 @@ public class ItemBoat extends Item {
         MovingObjectPosition movingobjectposition = world.rayTrace(vec3d, vec3d1, true);
 
         if (movingobjectposition == null) {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
         } else {
             Vec3D vec3d2 = entityhuman.e(1.0F);
             boolean flag = false;
@@ -52,15 +56,15 @@ public class ItemBoat extends Item {
             }
 
             if (flag) {
-                return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
             } else if (movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-                return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
             } else {
                 // CraftBukkit start - Boat placement
                 org.bukkit.event.player.PlayerInteractEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent(entityhuman, org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, enumhand);
 
                 if (event.isCancelled()) {
-                    return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
                 }
                 // CraftBukkit end
                 Block block = world.getType(movingobjectposition.a()).getBlock();
@@ -70,10 +74,10 @@ public class ItemBoat extends Item {
                 entityboat.setType(this.a);
                 entityboat.yaw = entityhuman.yaw;
                 if (!world.getCubes(entityboat, entityboat.getBoundingBox().g(-0.1D)).isEmpty()) {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 } else {
                     if (!world.isClientSide) {
-                        if (!world.addEntity(entityboat)) return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack); // CraftBukkit
+                        if (!world.addEntity(entityboat)) return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack); // CraftBukkit
                     }
 
                     if (!entityhuman.abilities.canInstantlyBuild) {
@@ -81,7 +85,7 @@ public class ItemBoat extends Item {
                     }
 
                     entityhuman.b(StatisticList.b((Item) this));
-                    return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+                    return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/ItemBow.java b/src/main/java/net/minecraft/world/item/ItemBow.java
similarity index 92%
rename from src/main/java/net/minecraft/server/ItemBow.java
rename to src/main/java/net/minecraft/world/item/ItemBow.java
index 44e7be58e..722ce7e75 100644
--- a/src/main/java/net/minecraft/server/ItemBow.java
+++ b/src/main/java/net/minecraft/world/item/ItemBow.java
@@ -1,5 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
 
@@ -151,15 +154,15 @@ public class ItemBow extends Item {
         return EnumAnimation.BOW;
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
         boolean flag = !this.a(entityhuman, itemstack).isEmpty(); // Paper
 
         if (!entityhuman.abilities.canInstantlyBuild && !flag) {
-            return flag ? new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack) : new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+            return flag ? new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack) : new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
         } else {
             entityhuman.c(enumhand);
-            return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+            return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/world/item/ItemBucket.java
similarity index 79%
rename from src/main/java/net/minecraft/server/ItemBucket.java
rename to src/main/java/net/minecraft/world/item/ItemBucket.java
index 41fea5bbf..d7ccbf380 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/world/item/ItemBucket.java
@@ -1,7 +1,10 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 import javax.annotation.Nullable;
 // CraftBukkit start
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.player.PlayerBucketEmptyEvent;
@@ -18,23 +21,23 @@ public class ItemBucket extends Item {
         this.b(CreativeModeTab.f);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         boolean flag = this.a == Blocks.AIR;
         ItemStack itemstack = entityhuman.b(enumhand);
         MovingObjectPosition movingobjectposition = this.a(world, entityhuman, flag);
 
         if (movingobjectposition == null) {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
         } else if (movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
         } else {
             BlockPosition blockposition = movingobjectposition.a();
 
             if (!world.a(entityhuman, blockposition)) {
-                return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
             } else if (flag) {
                 if (!entityhuman.a(blockposition.shift(movingobjectposition.direction), movingobjectposition.direction, itemstack)) {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 } else {
                     IBlockData iblockdata = world.getType(blockposition);
                     Material material = iblockdata.getMaterial();
@@ -44,27 +47,27 @@ public class ItemBucket extends Item {
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.WATER_BUCKET);
  
                         if (event.isCancelled()) {
-                            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                         }
                         // CraftBukkit end
                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
                         entityhuman.b(StatisticList.b((Item) this));
                         entityhuman.a(SoundEffects.S, 1.0F, 1.0F);
-                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.WATER_BUCKET, event.getItemStack())); // CraftBukkit
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.WATER_BUCKET, event.getItemStack())); // CraftBukkit
                     } else if (material == Material.LAVA && ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, blockposition.getX(), blockposition.getY(), blockposition.getZ(), null, itemstack, Items.LAVA_BUCKET);
 
                         if (event.isCancelled()) {
-                            return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                         }
                         // CraftBukkit end
                         entityhuman.a(SoundEffects.T, 1.0F, 1.0F);
                         world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 11);
                         entityhuman.b(StatisticList.b((Item) this));
-                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.LAVA_BUCKET, event.getItemStack())); // CraftBukkit
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, this.a(itemstack, entityhuman, Items.LAVA_BUCKET, event.getItemStack())); // CraftBukkit
                     } else {
-                        return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                     }
                 }
             } else {
@@ -72,16 +75,16 @@ public class ItemBucket extends Item {
                 BlockPosition blockposition1 = flag1 && movingobjectposition.direction == EnumDirection.UP ? blockposition : blockposition.shift(movingobjectposition.direction);
 
                 if (!entityhuman.a(blockposition1, movingobjectposition.direction, itemstack)) {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 } else if (this.a(entityhuman, world, blockposition1, movingobjectposition.direction, blockposition, itemstack)) { // CraftBukkit
                     if (entityhuman instanceof EntityPlayer) {
                         CriterionTriggers.x.a((EntityPlayer) entityhuman, blockposition1, itemstack);
                     }
 
                     entityhuman.b(StatisticList.b((Item) this));
-                    return !entityhuman.abilities.canInstantlyBuild ? new InteractionResultWrapper(EnumInteractionResult.SUCCESS, new ItemStack(Items.BUCKET)) : new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+                    return !entityhuman.abilities.canInstantlyBuild ? new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, new ItemStack(Items.BUCKET)) : new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
                 } else {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/ItemChorusFruit.java b/src/main/java/net/minecraft/world/item/ItemChorusFruit.java
similarity index 97%
rename from src/main/java/net/minecraft/server/ItemChorusFruit.java
rename to src/main/java/net/minecraft/world/item/ItemChorusFruit.java
index 1fb0748bc..08cf1cd60 100644
--- a/src/main/java/net/minecraft/server/ItemChorusFruit.java
+++ b/src/main/java/net/minecraft/world/item/ItemChorusFruit.java
@@ -1,6 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 // CraftBukkit start
+import net.minecraft.server.*;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerTeleportEvent;
diff --git a/src/main/java/net/minecraft/server/ItemDoor.java b/src/main/java/net/minecraft/world/item/ItemDoor.java
similarity index 88%
rename from src/main/java/net/minecraft/server/ItemDoor.java
rename to src/main/java/net/minecraft/world/item/ItemDoor.java
index a0d89a120..f39d100e6 100644
--- a/src/main/java/net/minecraft/server/ItemDoor.java
+++ b/src/main/java/net/minecraft/world/item/ItemDoor.java
@@ -1,4 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 
 public class ItemDoor extends Item {
 
@@ -9,9 +12,9 @@ public class ItemDoor extends Item {
         this.b(CreativeModeTab.d);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (enumdirection != EnumDirection.UP) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
@@ -33,9 +36,9 @@ public class ItemDoor extends Item {
 
                 world.a(entityhuman, blockposition, soundeffecttype.e(), SoundCategory.BLOCKS, (soundeffecttype.a() + 1.0F) / 2.0F, soundeffecttype.b() * 0.8F);
                 itemstack.subtract(1);
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             } else {
-                return EnumInteractionResult.FAIL;
+                return InteractionResult.FAIL;
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemDye.java b/src/main/java/net/minecraft/world/item/ItemDye.java
similarity index 88%
rename from src/main/java/net/minecraft/server/ItemDye.java
rename to src/main/java/net/minecraft/world/item/ItemDye.java
index 2dc18dbed..8a8926b1c 100644
--- a/src/main/java/net/minecraft/server/ItemDye.java
+++ b/src/main/java/net/minecraft/world/item/ItemDye.java
@@ -1,5 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 import org.bukkit.event.entity.SheepDyeWoolEvent; // CraftBukkit
 
 public class ItemDye extends Item {
@@ -18,11 +20,11 @@ public class ItemDye extends Item {
         return super.getName() + "." + EnumColor.fromInvColorIndex(i).d();
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack)) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             EnumColor enumcolor = EnumColor.fromInvColorIndex(itemstack.getData());
 
@@ -32,7 +34,7 @@ public class ItemDye extends Item {
                         world.triggerEffect(2005, blockposition, 0);
                     }
 
-                    return EnumInteractionResult.SUCCESS;
+                    return InteractionResult.SUCCESS;
                 }
             } else if (enumcolor == EnumColor.BROWN) {
                 IBlockData iblockdata = world.getType(blockposition);
@@ -40,7 +42,7 @@ public class ItemDye extends Item {
 
                 if (block == Blocks.LOG && iblockdata.get(BlockLog1.VARIANT) == BlockWood.EnumLogVariant.JUNGLE) {
                     if (enumdirection == EnumDirection.DOWN || enumdirection == EnumDirection.UP) {
-                        return EnumInteractionResult.FAIL;
+                        return InteractionResult.FAIL;
                     }
 
                     blockposition = blockposition.shift(enumdirection);
@@ -52,14 +54,14 @@ public class ItemDye extends Item {
                             itemstack.subtract(1);
                         }
 
-                        return EnumInteractionResult.SUCCESS;
+                        return InteractionResult.SUCCESS;
                     }
                 }
 
-                return EnumInteractionResult.FAIL;
+                return InteractionResult.FAIL;
             }
 
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemEndCrystal.java b/src/main/java/net/minecraft/world/item/ItemEndCrystal.java
new file mode 100644
index 000000000..06d851139
--- /dev/null
+++ b/src/main/java/net/minecraft/world/item/ItemEndCrystal.java
@@ -0,0 +1,63 @@
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
+
+import java.util.List;
+
+public class ItemEndCrystal extends Item {
+
+    public ItemEndCrystal() {
+        this.c("end_crystal");
+        this.b(CreativeModeTab.c);
+    }
+
+    @Override
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        IBlockData iblockdata = world.getType(blockposition);
+
+        if (iblockdata.getBlock() != Blocks.OBSIDIAN && iblockdata.getBlock() != Blocks.BEDROCK) {
+            return InteractionResult.FAIL;
+        } else {
+            BlockPosition blockposition1 = blockposition.up();
+            ItemStack itemstack = entityhuman.b(enumhand);
+
+            if (!entityhuman.a(blockposition1, enumdirection, itemstack)) {
+                return InteractionResult.FAIL;
+            } else {
+                BlockPosition blockposition2 = blockposition1.up();
+                boolean flag = !world.isEmpty(blockposition1) && !world.getType(blockposition1).getBlock().a((IBlockAccess) world, blockposition1);
+
+                flag |= !world.isEmpty(blockposition2) && !world.getType(blockposition2).getBlock().a((IBlockAccess) world, blockposition2);
+                if (flag) {
+                    return InteractionResult.FAIL;
+                } else {
+                    double d0 = blockposition1.getX();
+                    double d1 = blockposition1.getY();
+                    double d2 = blockposition1.getZ();
+                    List list = world.getEntities(null, new AxisAlignedBB(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
+
+                    if (!list.isEmpty()) {
+                        return InteractionResult.FAIL;
+                    } else {
+                        if (!world.isClientSide) {
+                            EntityEnderCrystal entityendercrystal = new EntityEnderCrystal(world, (float) blockposition.getX() + 0.5F, blockposition.getY() + 1, (float) blockposition.getZ() + 0.5F);
+
+                            entityendercrystal.setShowingBottom(false);
+                            world.addEntity(entityendercrystal);
+                            if (world.worldProvider instanceof WorldProviderTheEnd) {
+                                EnderDragonBattle enderdragonbattle = ((WorldProviderTheEnd) world.worldProvider).t();
+
+                                enderdragonbattle.e();
+                            }
+                        }
+
+                        itemstack.subtract(1);
+                        return InteractionResult.SUCCESS;
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemEnderPearl.java b/src/main/java/net/minecraft/world/item/ItemEnderPearl.java
similarity index 70%
rename from src/main/java/net/minecraft/server/ItemEnderPearl.java
rename to src/main/java/net/minecraft/world/item/ItemEnderPearl.java
index a0bf985da..cc474ad44 100644
--- a/src/main/java/net/minecraft/server/ItemEnderPearl.java
+++ b/src/main/java/net/minecraft/world/item/ItemEnderPearl.java
@@ -1,4 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 
 public class ItemEnderPearl extends Item {
 
@@ -7,7 +11,7 @@ public class ItemEnderPearl extends Item {
         this.b(CreativeModeTab.f);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         // CraftBukkit start - change order
@@ -19,7 +23,7 @@ public class ItemEnderPearl extends Item {
                 if (entityhuman instanceof EntityPlayer) {
                     ((EntityPlayer) entityhuman).getBukkitEntity().updateInventory();
                 }
-                return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
             }
         }
 
@@ -32,6 +36,6 @@ public class ItemEnderPearl extends Item {
         // CraftBukkit end
 
         entityhuman.b(StatisticList.b((Item) this));
-        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+        return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemFireball.java b/src/main/java/net/minecraft/world/item/ItemFireball.java
similarity index 74%
rename from src/main/java/net/minecraft/server/ItemFireball.java
rename to src/main/java/net/minecraft/world/item/ItemFireball.java
index f51e8e41e..a84bd10d5 100644
--- a/src/main/java/net/minecraft/server/ItemFireball.java
+++ b/src/main/java/net/minecraft/world/item/ItemFireball.java
@@ -1,4 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 
 public class ItemFireball extends Item {
 
@@ -6,15 +9,15 @@ public class ItemFireball extends Item {
         this.b(CreativeModeTab.f);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (world.isClientSide) {
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else {
             blockposition = blockposition.shift(enumdirection);
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (!entityhuman.a(blockposition, enumdirection, itemstack)) {
-                return EnumInteractionResult.FAIL;
+                return InteractionResult.FAIL;
             } else {
                 if (world.getType(blockposition).getMaterial() == Material.AIR) {
                     // CraftBukkit start - fire BlockIgniteEvent
@@ -22,7 +25,7 @@ public class ItemFireball extends Item {
                         if (!entityhuman.abilities.canInstantlyBuild) {
                             itemstack.subtract(1);
                         }
-                        return EnumInteractionResult.PASS;
+                        return InteractionResult.PASS;
                     }
                     // CraftBukkit end
                     world.a((EntityHuman) null, blockposition, SoundEffects.bD, SoundCategory.BLOCKS, 1.0F, (ItemFireball.j.nextFloat() - ItemFireball.j.nextFloat()) * 0.2F + 1.0F);
@@ -33,7 +36,7 @@ public class ItemFireball extends Item {
                     itemstack.subtract(1);
                 }
 
-                return EnumInteractionResult.SUCCESS;
+                return InteractionResult.SUCCESS;
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemFireworks.java b/src/main/java/net/minecraft/world/item/ItemFireworks.java
similarity index 56%
rename from src/main/java/net/minecraft/server/ItemFireworks.java
rename to src/main/java/net/minecraft/world/item/ItemFireworks.java
index 44a997215..7b00197bf 100644
--- a/src/main/java/net/minecraft/server/ItemFireworks.java
+++ b/src/main/java/net/minecraft/world/item/ItemFireworks.java
@@ -1,41 +1,45 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 
 public class ItemFireworks extends Item {
 
     public ItemFireworks() {}
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         if (!world.isClientSide) {
             ItemStack itemstack = entityhuman.b(enumhand);
             EntityFireworks entityfireworks = new EntityFireworks(world, (double) ((float) blockposition.getX() + f), (double) ((float) blockposition.getY() + f1), (double) ((float) blockposition.getZ() + f2), itemstack);
 
-            entityfireworks.spawningEntity = entityhuman.getUniqueID(); // Paper
+            entityfireworks.spawningEntity = entityhuman.getUUID(); // Paper
             world.addEntity(entityfireworks);
             if (!entityhuman.abilities.canInstantlyBuild) {
                 itemstack.subtract(1);
             }
         }
 
-        return EnumInteractionResult.SUCCESS;
+        return InteractionResult.SUCCESS;
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         if (entityhuman.cP()) {
             ItemStack itemstack = entityhuman.b(enumhand);
 
             if (!world.isClientSide) {
                 EntityFireworks entityfireworks = new EntityFireworks(world, itemstack, entityhuman);
 
-                entityfireworks.spawningEntity = entityhuman.getUniqueID(); // Paper
+                entityfireworks.spawningEntity = entityhuman.getUUID(); // Paper
                 world.addEntity(entityfireworks);
                 if (!entityhuman.abilities.canInstantlyBuild) {
                     itemstack.subtract(1);
                 }
             }
 
-            return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, entityhuman.b(enumhand));
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, entityhuman.b(enumhand));
         } else {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, entityhuman.b(enumhand));
+            return new InteractionResultWrapper(InteractionResult.PASS, entityhuman.b(enumhand));
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemFishingRod.java b/src/main/java/net/minecraft/world/item/ItemFishingRod.java
similarity index 82%
rename from src/main/java/net/minecraft/server/ItemFishingRod.java
rename to src/main/java/net/minecraft/world/item/ItemFishingRod.java
index b425baf07..7ecd946e7 100644
--- a/src/main/java/net/minecraft/server/ItemFishingRod.java
+++ b/src/main/java/net/minecraft/world/item/ItemFishingRod.java
@@ -1,5 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 import org.bukkit.event.player.PlayerFishEvent; // CraftBukkit
 
 public class ItemFishingRod extends Item {
@@ -12,7 +15,7 @@ public class ItemFishingRod extends Item {
         });
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (entityhuman.hookedFish != null) {
@@ -43,7 +46,7 @@ public class ItemFishingRod extends Item {
 
                 if (playerFishEvent.isCancelled()) {
                     entityhuman.hookedFish = null;
-                    return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
                 }
                 world.a((EntityHuman) null, entityhuman.locX, entityhuman.locY, entityhuman.locZ, SoundEffects.L, SoundCategory.NEUTRAL, 0.5F, 0.4F / (ItemFishingRod.j.nextFloat() * 0.4F + 0.8F));
                 // CraftBukkit end
@@ -55,7 +58,7 @@ public class ItemFishingRod extends Item {
             entityhuman.b(StatisticList.b((Item) this));
         }
 
-        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+        return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
     }
 
     public int c() {
diff --git a/src/main/java/net/minecraft/server/ItemFlintAndSteel.java b/src/main/java/net/minecraft/world/item/ItemFlintAndSteel.java
similarity index 76%
rename from src/main/java/net/minecraft/server/ItemFlintAndSteel.java
rename to src/main/java/net/minecraft/world/item/ItemFlintAndSteel.java
index 96e1c5141..d0faedca5 100644
--- a/src/main/java/net/minecraft/server/ItemFlintAndSteel.java
+++ b/src/main/java/net/minecraft/world/item/ItemFlintAndSteel.java
@@ -1,4 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 
 public class ItemFlintAndSteel extends Item {
 
@@ -8,18 +11,18 @@ public class ItemFlintAndSteel extends Item {
         this.b(CreativeModeTab.i);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         blockposition = blockposition.shift(enumdirection);
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (!entityhuman.a(blockposition, enumdirection, itemstack)) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             if (world.getType(blockposition).getMaterial() == Material.AIR) {
                 // CraftBukkit start - Store the clicked block
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), org.bukkit.event.block.BlockIgniteEvent.IgniteCause.FLINT_AND_STEEL, entityhuman).isCancelled()) {
                     itemstack.damage(1, entityhuman);
-                    return EnumInteractionResult.PASS;
+                    return InteractionResult.PASS;
                 }
                 // CraftBukkit end
                 world.a(entityhuman, blockposition, SoundEffects.bO, SoundCategory.BLOCKS, 1.0F, ItemFlintAndSteel.j.nextFloat() * 0.4F + 0.8F);
@@ -31,7 +34,7 @@ public class ItemFlintAndSteel extends Item {
             }
 
             itemstack.damage(1, entityhuman);
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemHanging.java b/src/main/java/net/minecraft/world/item/ItemHanging.java
similarity index 83%
rename from src/main/java/net/minecraft/server/ItemHanging.java
rename to src/main/java/net/minecraft/world/item/ItemHanging.java
index 53727459a..1f638835c 100644
--- a/src/main/java/net/minecraft/server/ItemHanging.java
+++ b/src/main/java/net/minecraft/world/item/ItemHanging.java
@@ -1,7 +1,9 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 import javax.annotation.Nullable;
 // CraftBukkit start
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 import org.bukkit.entity.Player;
 import org.bukkit.event.hanging.HangingPlaceEvent;
 // CraftBukkit end
@@ -15,7 +17,7 @@ public class ItemHanging extends Item {
         this.b(CreativeModeTab.c);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         ItemStack itemstack = entityhuman.b(enumhand);
         BlockPosition blockposition1 = blockposition.shift(enumdirection);
 
@@ -33,7 +35,7 @@ public class ItemHanging extends Item {
                     world.getServer().getPluginManager().callEvent(event);
 
                     if (event.isCancelled()) {
-                        return EnumInteractionResult.FAIL;
+                        return InteractionResult.FAIL;
                     }
                     // CraftBukkit end
                     entityhanging.p();
@@ -43,9 +45,9 @@ public class ItemHanging extends Item {
                 itemstack.subtract(1);
             }
 
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemLeash.java b/src/main/java/net/minecraft/world/item/ItemLeash.java
similarity index 86%
rename from src/main/java/net/minecraft/server/ItemLeash.java
rename to src/main/java/net/minecraft/world/item/ItemLeash.java
index bec8ae3cd..a0e76bd6f 100644
--- a/src/main/java/net/minecraft/server/ItemLeash.java
+++ b/src/main/java/net/minecraft/world/item/ItemLeash.java
@@ -1,8 +1,10 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 import java.util.Iterator;
 import java.util.List;
 
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 import org.bukkit.event.hanging.HangingPlaceEvent; // CraftBukkit
 
 public class ItemLeash extends Item {
@@ -11,17 +13,17 @@ public class ItemLeash extends Item {
         this.b(CreativeModeTab.i);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         Block block = world.getType(blockposition).getBlock();
 
         if (!(block instanceof BlockFence)) {
-            return EnumInteractionResult.PASS;
+            return InteractionResult.PASS;
         } else {
             if (!world.isClientSide) {
                 a(entityhuman, world, blockposition);
             }
 
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemMinecart.java b/src/main/java/net/minecraft/world/item/ItemMinecart.java
similarity index 93%
rename from src/main/java/net/minecraft/server/ItemMinecart.java
rename to src/main/java/net/minecraft/world/item/ItemMinecart.java
index ac807ced5..83fad24e4 100644
--- a/src/main/java/net/minecraft/server/ItemMinecart.java
+++ b/src/main/java/net/minecraft/world/item/ItemMinecart.java
@@ -1,6 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
 
 // CraftBukkit start
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.block.BlockDispenseEvent;
 // CraftBukkit end
@@ -95,11 +97,11 @@ public class ItemMinecart extends Item {
         BlockDispenser.REGISTRY.a(this, ItemMinecart.a);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         IBlockData iblockdata = world.getType(blockposition);
 
         if (!BlockMinecartTrackAbstract.i(iblockdata)) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             ItemStack itemstack = entityhuman.b(enumhand);
 
@@ -117,11 +119,11 @@ public class ItemMinecart extends Item {
                     entityminecartabstract.setCustomName(itemstack.getName());
                 }
 
-                if (!world.addEntity(entityminecartabstract)) return EnumInteractionResult.PASS; // CraftBukkit
+                if (!world.addEntity(entityminecartabstract)) return InteractionResult.PASS; // CraftBukkit
             }
 
             itemstack.subtract(1);
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemMonsterEgg.java b/src/main/java/net/minecraft/world/item/ItemMonsterEgg.java
similarity index 87%
rename from src/main/java/net/minecraft/server/ItemMonsterEgg.java
rename to src/main/java/net/minecraft/world/item/ItemMonsterEgg.java
index 5a08f6b4e..2089a6246 100644
--- a/src/main/java/net/minecraft/server/ItemMonsterEgg.java
+++ b/src/main/java/net/minecraft/world/item/ItemMonsterEgg.java
@@ -1,4 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 
 import java.util.Iterator;
 import java.util.List;
@@ -22,13 +26,13 @@ public class ItemMonsterEgg extends Item {
         return s;
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (world.isClientSide) {
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else if (!entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack)) {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         } else {
             IBlockData iblockdata = world.getType(blockposition);
             Block block = iblockdata.getBlock();
@@ -46,7 +50,7 @@ public class ItemMonsterEgg extends Item {
                         itemstack.subtract(1);
                     }
 
-                    return EnumInteractionResult.SUCCESS;
+                    return InteractionResult.SUCCESS;
                 }
             }
 
@@ -65,7 +69,7 @@ public class ItemMonsterEgg extends Item {
                 }
             }
 
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         }
     }
 
@@ -100,7 +104,7 @@ public class ItemMonsterEgg extends Item {
                 }
 
                 NBTTagCompound nbttagcompound1 = entity.save(new NBTTagCompound());
-                UUID uuid = entity.getUniqueID();
+                UUID uuid = entity.getUUID();
 
                 // Paper start - Filter out position and motion information
                 final NBTTagCompound entityTag = nbttagcompound.getCompound("EntityTag");
@@ -117,11 +121,11 @@ public class ItemMonsterEgg extends Item {
         }
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         if (world.isClientSide) {
-            return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+            return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
         } else {
             MovingObjectPosition movingobjectposition = this.a(world, entityhuman, true);
 
@@ -129,12 +133,12 @@ public class ItemMonsterEgg extends Item {
                 BlockPosition blockposition = movingobjectposition.a();
 
                 if (!(world.getType(blockposition).getBlock() instanceof BlockFluids)) {
-                    return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
                 } else if (world.a(entityhuman, blockposition) && entityhuman.a(blockposition, movingobjectposition.direction, itemstack)) {
                     Entity entity = a(world, h(itemstack), (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D);
 
                     if (entity == null) {
-                        return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.PASS, itemstack);
                     } else {
                         if (entity instanceof EntityLiving && itemstack.hasName()) {
                             entity.setCustomName(itemstack.getName());
@@ -146,13 +150,13 @@ public class ItemMonsterEgg extends Item {
                         }
 
                         entityhuman.b(StatisticList.b((Item) this));
-                        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+                        return new net.minecraft.world.InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
                     }
                 } else {
-                    return new InteractionResultWrapper(EnumInteractionResult.FAIL, itemstack);
+                    return new net.minecraft.world.InteractionResultWrapper(InteractionResult.FAIL, itemstack);
                 }
             } else {
-                return new InteractionResultWrapper(EnumInteractionResult.PASS, itemstack);
+                return new InteractionResultWrapper(InteractionResult.PASS, itemstack);
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/ItemRedstone.java b/src/main/java/net/minecraft/world/item/ItemRedstone.java
similarity index 71%
rename from src/main/java/net/minecraft/server/ItemRedstone.java
rename to src/main/java/net/minecraft/world/item/ItemRedstone.java
index 57c4a9375..5aa08c488 100644
--- a/src/main/java/net/minecraft/server/ItemRedstone.java
+++ b/src/main/java/net/minecraft/world/item/ItemRedstone.java
@@ -1,4 +1,7 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
 
 public class ItemRedstone extends Item {
 
@@ -6,7 +9,7 @@ public class ItemRedstone extends Item {
         this.b(CreativeModeTab.d);
     }
 
-    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+    public InteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
         boolean flag = world.getType(blockposition).getBlock().a((IBlockAccess) world, blockposition);
         BlockPosition blockposition1 = flag ? blockposition : blockposition.shift(enumdirection);
         ItemStack itemstack = entityhuman.b(enumhand);
@@ -18,9 +21,9 @@ public class ItemRedstone extends Item {
             }
 
             itemstack.subtract(1);
-            return EnumInteractionResult.SUCCESS;
+            return InteractionResult.SUCCESS;
         } else {
-            return EnumInteractionResult.FAIL;
+            return InteractionResult.FAIL;
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/ItemSnowball.java b/src/main/java/net/minecraft/world/item/ItemSnowball.java
similarity index 78%
rename from src/main/java/net/minecraft/server/ItemSnowball.java
rename to src/main/java/net/minecraft/world/item/ItemSnowball.java
index 2e73c93aa..b4406a080 100644
--- a/src/main/java/net/minecraft/server/ItemSnowball.java
+++ b/src/main/java/net/minecraft/world/item/ItemSnowball.java
@@ -1,4 +1,8 @@
-package net.minecraft.server;
+package net.minecraft.world.item;
+
+import net.minecraft.server.*;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.InteractionResultWrapper;
 
 public class ItemSnowball extends Item {
 
@@ -7,7 +11,7 @@ public class ItemSnowball extends Item {
         this.b(CreativeModeTab.f);
     }
 
-    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+    public net.minecraft.world.InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
         ItemStack itemstack = entityhuman.b(enumhand);
 
         // CraftBukkit start - moved down
@@ -35,6 +39,6 @@ public class ItemSnowball extends Item {
         // CraftBukkit end
 
         entityhuman.b(StatisticList.b((Item) this));
-        return new InteractionResultWrapper(EnumInteractionResult.SUCCESS, itemstack);
+        return new InteractionResultWrapper(InteractionResult.SUCCESS, itemstack);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 7c82e18b9..d1921594b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -19,12 +19,12 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
 import net.minecraft.server.*;
 
+import net.minecraft.world.Difficulty;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -711,8 +711,8 @@ public final class CraftServer implements Server {
         ((DedicatedServer) console).propertyManager = config;
 
         boolean animals = config.getBoolean("spawn-animals", console.getSpawnAnimals());
-        boolean monsters = config.getBoolean("spawn-monsters", console.worlds.get(0).getDifficulty() != EnumDifficulty.PEACEFUL);
-        EnumDifficulty difficulty = EnumDifficulty.getById(config.getInt("difficulty", console.worlds.get(0).getDifficulty().ordinal()));
+        boolean monsters = config.getBoolean("spawn-monsters", console.worlds.get(0).getDifficulty() != Difficulty.PEACEFUL);
+        Difficulty difficulty = Difficulty.getById(config.getInt("difficulty", console.worlds.get(0).getDifficulty().ordinal()));
 
         online.value = config.getBoolean("online-mode", console.getOnlineMode());
         console.setSpawnAnimals(config.getBoolean("spawn-animals", console.getSpawnAnimals()));
@@ -971,7 +971,7 @@ public final class CraftServer implements Server {
 
         internal.tracker = new EntityTracker(internal);
         internal.addIWorldAccess(new WorldManager(console, internal));
-        internal.worldData.setDifficulty(EnumDifficulty.EASY);
+        internal.worldData.setDifficulty(Difficulty.EASY);
         internal.setSpawnFlags(true, true);
         console.worlds.add(internal);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index afb141c62..f399bd3b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -14,12 +14,13 @@ import java.util.UUID;
 
 import net.minecraft.server.*;
 
+import net.minecraft.world.Difficulty;
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.apache.commons.lang.Validate;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.ChunkSnapshot;
-import org.bukkit.Difficulty;
 import org.bukkit.Effect;
 import org.bukkit.Location;
 import org.bukkit.Particle;
@@ -38,7 +39,6 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.metadata.BlockMetadataStore;
 import org.bukkit.craftbukkit.potion.CraftPotionUtil;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.bukkit.craftbukkit.util.LongHash;
 import org.bukkit.entity.*;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.minecart.CommandMinecart;
@@ -836,12 +836,12 @@ public class CraftWorld implements World {
         world.savingDisabled = !value;
     }
 
-    public void setDifficulty(Difficulty difficulty) {
-        this.getHandle().worldData.setDifficulty(EnumDifficulty.getById(difficulty.getValue()));
+    public void setDifficulty(org.bukkit.Difficulty difficulty) {
+        this.getHandle().worldData.setDifficulty(Difficulty.getById(difficulty.getValue()));
     }
 
-    public Difficulty getDifficulty() {
-        return Difficulty.getByValue(this.getHandle().getDifficulty().ordinal());
+    public org.bukkit.Difficulty getDifficulty() {
+        return org.bukkit.Difficulty.getByValue(this.getHandle().getDifficulty().ordinal());
     }
 
     public BlockMetadataStore getBlockMetadata() {
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6247bbda1..ede84e224 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -90,7 +90,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
                         CommandSender oldSender = lastSender;
                         lastSender = bSender;
                         try {
-                            as[i] = entity.getUniqueID().toString();
+                            as[i] = entity.getUUID().toString();
                             vanillaCommand.execute(server, icommandlistener, as);
                             j++;
                         } catch (ExceptionUsage exceptionusage) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index ffb863e60..3b4917090 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.server.BlockPosition;
-import net.minecraft.server.EntityEnderCrystal;
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderCrystal;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 47edc0494..7620fc2bb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -9,6 +9,7 @@ import java.util.UUID;
 
 import net.minecraft.server.*;
 
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.bukkit.Chunk;
 import org.bukkit.EntityEffect;
 import org.bukkit.Location;
@@ -16,7 +17,6 @@ import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.metadata.MetadataValue;
@@ -192,7 +192,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             else { return new CraftFireball(server, (EntityFireball) entity); }
         }
         else if (entity instanceof EntityEnderSignal) { return new CraftEnderSignal(server, (EntityEnderSignal) entity); }
-        else if (entity instanceof EntityEnderCrystal) { return new CraftEnderCrystal(server, (EntityEnderCrystal) entity); }
+        else if (entity instanceof net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal) { return new CraftEnderCrystal(server, (EntityEnderCrystal) entity); }
         else if (entity instanceof EntityFishingHook) { return new CraftFish(server, (EntityFishingHook) entity); }
         else if (entity instanceof EntityItem) { return new CraftItem(server, (EntityItem) entity); }
         else if (entity instanceof EntityWeather) {
@@ -465,7 +465,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     public UUID getUniqueId() {
-        return getHandle().getUniqueID();
+        return getHandle().getUUID();
     }
 
     public int getTicksLived() {
@@ -689,7 +689,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean isInvulnerable() {
-        return getHandle().isInvulnerable(DamageSource.GENERIC);
+        return getHandle().isInvulnerableTo(DamageSource.GENERIC);
     }
 
     @Override
@@ -775,7 +775,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         @Override
         public boolean isInvulnerable()
         {
-            return getHandle().isInvulnerable(net.minecraft.server.DamageSource.GENERIC);
+            return getHandle().isInvulnerableTo(net.minecraft.server.DamageSource.GENERIC);
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 9c750efc7..551fb8cd6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -201,7 +201,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             reason = DamageSource.mobAttack(((CraftLivingEntity) source).getHandle());
         }
 
-        entity.damageEntity(reason, (float) amount);
+        entity.hurt(reason, (float) amount);
     }
 
     public Location getEyeLocation() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index d59d86efc..ede78720d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -62,7 +62,6 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerGameModeChangeEvent;
 import org.bukkit.event.player.PlayerRegisterChannelEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerUnregisterChannelEvent;
@@ -70,7 +69,6 @@ import org.bukkit.inventory.InventoryView.Property;
 import org.bukkit.map.MapCursor;
 import org.bukkit.map.MapView;
 import org.bukkit.metadata.MetadataValue;
-import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.StandardMessenger;
 import org.bukkit.scoreboard.Scoreboard;
@@ -1164,7 +1162,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper start
     private void reregisterPlayer(EntityPlayer player) {
-        if (!hiddenPlayers.containsKey(player.getUniqueID())) {
+        if (!hiddenPlayers.containsKey(player.getUUID())) {
             unregisterPlayer(player);
             registerPlayer(player);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index f1a3ca950..11488b663 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -12,6 +12,7 @@ import com.google.common.base.Functions;
 
 import net.minecraft.server.*;
 
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -46,7 +47,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.entity.Projectile;
 import org.bukkit.entity.ThrownExpBottle;
 import org.bukkit.entity.ThrownPotion;
-import org.bukkit.entity.ExperienceOrb; // Paper
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.block.*;
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 4c8d94c87..da0b7ecef 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -1,7 +1,6 @@
 package org.spigotmc;
 
 import java.util.List;
-import java.util.Set;
 
 import co.aikar.timings.MinecraftTimings;
 import net.minecraft.server.AxisAlignedBB;
@@ -13,7 +12,7 @@ import net.minecraft.server.EntityArrow;
 import net.minecraft.server.EntityComplexPart;
 import net.minecraft.server.EntityCreature;
 import net.minecraft.server.EntityCreeper;
-import net.minecraft.server.EntityEnderCrystal;
+import net.minecraft.world.entity.boss.enderdragon.EntityEnderCrystal;
 import net.minecraft.server.EntityEnderDragon;
 import net.minecraft.server.EntityFallingBlock;
 import net.minecraft.server.EntityFireball;
diff --git a/src/test/java/org/bukkit/DyeColorsTest.java b/src/test/java/org/bukkit/DyeColorsTest.java
index 020714da6..9f8bbe61a 100644
--- a/src/test/java/org/bukkit/DyeColorsTest.java
+++ b/src/test/java/org/bukkit/DyeColorsTest.java
@@ -7,7 +7,7 @@ import java.util.ArrayList;
 import java.util.List;
 
 import net.minecraft.server.EnumColor;
-import net.minecraft.server.ItemDye;
+import net.minecraft.world.item.ItemDye;
 
 import org.bukkit.support.AbstractTestingBase;
 import org.junit.Test;
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index a29731f1d..56d953b7f 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -10,7 +10,7 @@ import com.destroystokyo.paper.inventory.meta.ArmorStandMeta;
 import net.minecraft.server.Block;
 import net.minecraft.server.ITileEntity;
 import net.minecraft.server.Item;
-import net.minecraft.server.ItemBlock;
+import net.minecraft.world.item.ItemBlock;
 import net.minecraft.server.ItemReed;
 
 import org.bukkit.Bukkit;
-- 
2.45.2.windows.1

